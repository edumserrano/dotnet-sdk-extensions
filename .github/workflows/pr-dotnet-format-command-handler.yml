# When making changes to this file please update the corresponding documentation which can be found at /docs/dev-notes/workflows/pr-dotnet-format-command-handler-workflow.md

name: PR dotnet format command handler

on:
  repository_dispatch:
    types: [dotnet-format-command]

defaults:
  run:
    shell: pwsh

env:
  DOTNET_FORMAT_JOB_NAME: dotnet format
  STATUS_CONTEXT : ${{ github.workflow }} / dotnet format (${{ github.event_name }}) # mimic format from github checks $workflow-name / $job-name ($event-name)
  WORKFLOW_RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
  PR_NUMBER: ${{ github.event.client_payload.pull_request.number }}
  PR_HEAD_SHA: ${{ github.event.client_payload.pull_request.head.sha }}
  PR_BRANCH_NAME: ${{ github.event.client_payload.pull_request.head.ref }}

jobs:
  dotnet-format:
    name: dotnet format
    if: github.event.client_payload.pull_request && github.event.client_payload.pull_request.state == 'open'
    runs-on: ubuntu-latest
    env:
      DOTNET_VERSION : 6.0.101
      SLN_FILENAME: DotNet.Sdk.Extensions.sln
      SLN_FILEPATH : ${{ github.workspace }}/DotNet.Sdk.Extensions.sln
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ env.PR_HEAD_SHA }}
        token: ${{ secrets.DOTNET_FORMAT_GH_TOKEN }}
    - name: Set PR status to pending
      uses: ./.github/actions/create-gh-status
      with:
        repo: ${{ github.repository }}
        pr-num: ${{ env.PR_NUMBER }}
        context: ${{ env.STATUS_CONTEXT }}
        state: pending
        description: Waiting for status to be reported
        target-url: ${{ env.WORKFLOW_RUN_URL }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Install dotnet-format tool
      run:  dotnet tool install --global dotnet-format
    - name: Cache/Restore NuGets
      uses: actions/cache@v2
      with:
        path:
          ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ env.DOTNET_VERSION }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: dotnet format
      run: |
        dotnet format ${{ env.SLN_FILEPATH }} --severity info --verbosity diagnostic
    - name: Push dotnet format changes
      id: auto-commit-action
      uses: stefanzweifel/git-auto-commit-action@v4.11.0
      with:
        branch: ${{ env.PR_BRANCH_NAME }}
        commit_message: dotnet format for PR ${{ env.PR_NUMBER }}
    - name: Setup PR comment
      id: setup-pr-comment
      run: |
        $commentBody = @"
        `# [${{ github.workflow }}](${{ env.WORKFLOW_RUN_URL }})

        "@
        $changesDetected = [System.Convert]::ToBoolean("${{ steps.auto-commit-action.outputs.changes_detected }}")
        if($changesDetected) {
          Write-Host "::set-output name=pr-comment-reaction::eyes"
          $lastCommitHash = git rev-parse HEAD
          $commentBody += ":exclamation: **dotnet format** found files that did not respect the code guidelines and pushed commit $lastCommitHash. Please review it before merging the PR."
        }
        else {
          Write-Host "::set-output name=pr-comment-reaction::hooray"
          $commentBody += ":heavy_check_mark: **dotnet format** didn't find any file that does not respect the code guidelines or there weren't any available automated fixes."
        }

        $commentBody += @"


        ## Note
        Sometimes the fix provided by the analyzers produces unecessary comments when formatting files.

        This should only happen if the project supports multiple target frameworks and the fix doesn't produce the same output for all. However, it seems that sometimes the ``Unmerged change from project ...`` comment shows up even though the fix produced the same output.

        If this happens, just delete the comments added. Otherwise, consider incorporating the commented out code using [preprocessor directives to control conditional compilation](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives#conditional-compilation).
        Example:
        ``````csharp
        #if NET5_0
            ...
        #elif NETCOREAPP3_1
            ...
        #endif
        ``````
        "@

        Write-Host "::set-output name=pr-comment-body::$commentBody"
    - name: Find Comment
      uses: peter-evans/find-comment@v1.3.0
      id: find-comment
      with:
        issue-number: ${{ env.PR_NUMBER }}
        body-includes: PR dotnet format command handler
        comment-author: github-actions
    - name: Create comment
      uses: peter-evans/create-or-update-comment@v1.4.5
      if:  ${{ steps.find-comment.outputs.comment-id == 0 }}
      with:
        issue-number: ${{ env.PR_NUMBER }}
        body: ${{ steps.setup-pr-comment.outputs.pr-comment-body }}
        reactions: ${{ steps.setup-pr-comment.outputs.pr-comment-reaction }}
    - name: Update comment
      uses: peter-evans/create-or-update-comment@v1.4.5
      if:  ${{ steps.find-comment.outputs.comment-id != 0 }}
      with:
        comment-id: ${{ steps.find-comment.outputs.comment-id }}
        edit-mode: replace
        body: ${{ steps.setup-pr-comment.outputs.pr-comment-body }}
        reactions: ${{ steps.setup-pr-comment.outputs.pr-comment-reaction }}

  set-final-pr-status:
    name: Set final PR status
    needs: [dotnet-format]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout # need to checkout because I'm using customs actions that exists on this repo
      uses: actions/checkout@v2
    - name: Get dotnet-format job execution time
      id: get-job-execution-time
      uses: ./.github/actions/get-gh-job-duration
      with:
        repo: ${{ github.repository }}
        run-id: ${{ github.run_id }}
        job-name: ${{ env.DOTNET_FORMAT_JOB_NAME }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Set PR status to success
      uses: ./.github/actions/create-gh-status
      with:
        repo: ${{ github.repository }}
        pr-num: ${{ env.PR_NUMBER }}
        context: ${{ env.STATUS_CONTEXT }}
        state: success
        description: Successful in ${{ steps.get-job-execution-time.outputs.job-duration }}
        target-url: ${{ env.WORKFLOW_RUN_URL }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Set PR status to failure
      if: ${{ needs.dotnet-format.result != 'success' || !success() }}
      uses: ./.github/actions/create-gh-status
      with:
        repo: ${{ github.repository }}
        pr-num: ${{ env.PR_NUMBER }}
        context: ${{ env.STATUS_CONTEXT }}
        state: failure
        description: Workflow failed or cancelled
        target-url: ${{ env.WORKFLOW_RUN_URL }}
        token: ${{ secrets.GITHUB_TOKEN }}
