name: PR dotnet format command handler

on:
  issue_comment:
    types: [created]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: pwsh

jobs:
  check-pr-comment:
    name: Check PR comment
    # if: github.event.issue.pull_request && github.event.issue.state == 'open' && github.event.comment.body == '/dotnet format'  # check if the comments come from pull request, exclude those from issue.
    runs-on: ubuntu-latest
    outputs:
      run-dotnet-format: ${{ steps.check-pr-comment.outputs.run-dotnet-format }}
      pr-number: ${{ steps.check-pr-comment.outputs.pr-number }}
      pr-head-sha: ${{ steps.check-pr-comment.outputs.pr-head-sha}}
    steps:
    - name: Dump context
      run: Write-Host '${{ toJson(github) }}'
    # - uses: xt0rted/pull-request-comment-branch@v1
    #   id: comment-branch
    # - name: Dump output from xt0rted/pull-request-comment-branch
    #   run: Write-Host '${{ toJson(steps.comment-branch.outputs) }}'
    # - uses: actions/checkout@v2
    #   with:
    #     ref: ${{ steps.comment-branch.outputs.head_ref }}
    # - uses: LouisBrunner/checks-action@v1.2.0
    #   with:
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     sha: ${{ steps.comment-branch.outputs.head_sha }}
    #     name: Test XYZ
    #     conclusion: ${{ job.status }}
    # - name: Create status check
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     $headSha="${{ steps.comment-branch.outputs.head_sha }}"
    #     $body = '{{"name":"myTestCheckPwsh", "head_sha": "{0}", "status": "completed", "conclusion": "success" }}' -f $headSha
    #     $repo = "${{ github.repository }}"
    #     $apiUrl = "https://api.github.com/repos/$repo/check-runs"
    #     $auth = "Authorization: Bearer $env:GITHUB_TOKEN"
    #     Write-Host $auth
    #     curl `
    #       -X POST `
    #       -H $auth `
    #       -H "Accept: application/vnd.github.v3+json" `
    #       $apiUrl -d $body
    # - name: Create status check bash
    #   shell: bash
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     BUILD_COMMIT=${{ steps.comment-branch.outputs.head_sha }}
    #     REPO=${{ github.repository }}
    #     curl \
    #     -X POST \
    #     -H "Authorization: Bearer $GITHUB_TOKEN" \
    #     -H "Accept: application/vnd.github.v3+json" \
    #     https://api.github.com/repos/edumserrano/dot-net-sdk-extensions/check-runs \
    #     -d '{"name":"myTestCheckBash", "head_sha": "'"$BUILD_COMMIT"'", "status": "completed", "conclusion": "success" }'

    - name: check PR comment
      uses: machine-learning-apps/actions-chatops@master
      id: check-pr-comment
      with:
        TRIGGER_PHRASE: "/dotnet format"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Dump output from 'check PR comment' step
      run: Write-Host '${{ toJson(steps.check-pr-comment.outputs) }}'
    - name: Set job outputs
      run: |
        Write-Host "::set-output name=run-dotnet-format::${{ steps.check-pr-comment.outputs.BOOL_TRIGGERED }}"
        Write-Host "::set-output name=pr-number::${{ steps.check-pr-comment.outputs.PULL_REQUEST_NUMBER }}"
        Write-Host "::set-output name=pr-head-sha::${{ steps.check-pr-comment.outputs.SHA }}"

  dotnet-format:
    name: dotnet format
    needs: [check-pr-comment]
    if: needs.check-pr-comment.outputs.can-run-dotnet-format == 'True'
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ sneeds.check-pr-comment.outputs.pr-number }}
      PR_HEAD_SHA: ${{ needs.check-pr-comment.outputs.pr-head-sha}}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ env.PR_HEAD_SHA }}
    # - name: Create status
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     $headSha="${{ steps.comment-branch.outputs.head_sha }}"
    #     $repo = "${{ github.repository }}"
    #     $uri = "https://api.github.com/repos/$repo/statuses/$headSha"
    #     $headers = @{
    #       Accept = "application/vnd.github.v3+json"
    #       Authorization = "Bearer ${{ env.GITHUB_TOKEN }}"
    #     }
    #     $body = @{
    #       context = "${{ github.workflow}}"
    #       description = "dotnet format changes pushed"
    #       target_url = "${{ env.WORKFLOW_RUN_URL }}"
    #       state = "success"
    #     } | ConvertTo-Json -compress

    #     Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body
    - name: Add PR Status
      uses: niteoweb/pull_request_status_action@v1.0.0
      with:
        pr_number: ${{ env.PR_NUMBER }}
        state: success # Any of the (error | failure | pending | success) states
        repository: ${{ github.repository }}
        context: ${{ github.workflow}}
        target_url: ${{ env.WORKFLOW_RUN_URL }}
        description: "dotnet format changes pushed"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



    # - name: Checkout
    #   uses: actions/checkout@v2
    # - name: Checkout Pull Request
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: gh pr checkout ${{ github.event.issue.number }}
    # - name: test
    #   run: exit 2


    # - name: Checkout
    #   uses: actions/checkout@v2
    #   with:
    #     ref: ${{ github.event.pull_request.head.sha }}
    # - name: Setup .NET
    #   uses: actions/setup-dotnet@v1
    #   with:
    #     dotnet-version: ${{ env.DOTNET_VERSION }}
    # - name: Install dotnet-format tool
    #   run:  dotnet tool install --global dotnet-format
    # - name: Cache/Restore NuGets
    #   uses: actions/cache@v2
    #   with:
    #     path:
    #       ~/.nuget/packages
    #     key: ${{ runner.os }}-nuget-${{ env.DOTNET_VERSION }}
    #     restore-keys: |
    #       ${{ runner.os }}-nuget-
    # - name: dotnet format check
    #   id: dotnet-format
    #   run: |
    #     Write-Host "::group::Running dotnet format"
    #     dotnet format ${{ env.SLN_FILEPATH }} `
    #       --fix-whitespace `
    #       --fix-style info `
    #       --fix-analyzers info `
    #       --verbosity diagnostic `
    #       --check
    #     Write-Host "::endgroup::"
    #     $hasChanges = $LASTEXITCODE -ne 0
    #     Write-Host "::set-output name=has-changes::$hasChanges"

    #     if($hasChanges) {
    #       Write-Host "::warning::dotnet format found files that require formatting."
    #     }
    #     else {
    #       Write-Host "dotnet format didn't find any file that requires formatting."
    #     }

    #     Exit 0 # always exit successfully
    # - name: GitHub PR comment
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     $hasChanges = [System.Convert]::ToBoolean("${{ steps.dotnet-format.outputs.has-changes }}")
    #     if($hasChanges) {
    #       $commentBody = @"
    #     :exclamation: **dotnet format** found files that do not respect the code guidelines. For more information please see the output from this [workflow run](${{ env.WORKFLOW_RUN_URL }}).

    #     Before merging this PR please fix the reported issues. You can do so by running [dotnet format](https://github.com/dotnet/format) on the solution as such:
    #     ``dotnet format ${{ env.SLN_FILENAME }} --fix-whitespace --fix-style info --fix-analyzers info --verbosity diagnostic``
    #     "@
    #     }
    #     else {
    #       $commentBody = @"
    #     :heavy_check_mark: **dotnet format** didn't find any file that does not respect the code guidelines. For more information please see the output from this [workflow run](${{ env.WORKFLOW_RUN_URL }}).
    #     "@
    #     }

    #     $commentBody += @"


    #     :warning: dotnet format does **NOT** remove unused references. You have to do this manually. Please check that there isn't any unused reference.
    #     "@

    #     $prNumber = "${{github.event.pull_request.number}}"
    #     gh pr comment $prNumber --body $commentBody
    # - name: Set workflow exit status
    #   run: |
    #     $hasChanges = [System.Convert]::ToBoolean("${{ steps.dotnet-format.outputs.has-changes }}")
    #     if($hasChanges) {
    #       Write-Host "dotnet format found files that do not respect the code guidelines so setting the workflow status as failed."
    #       Exit 1
    #     }

    #     Write-Host "dotnet format didn't find any file that does not respect the code guidelines so setting the workflow status as successful."
    #     Exit 0
