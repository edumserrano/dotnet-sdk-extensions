name: PR dotnet format command handler

on:
  issue_comment:
    types: [created]

# Unlike other workflows this one does not have a concurrency defined.
# If we define a concurrency then aworkflow run that was triggered by the expected comment could get cancelled
# by any another following comment added to the pull request
#
# As an alternative we could consider adding the comment body (github.event.comment.body) to the
# concurrency group id. This would mean that workflows would only get cancelled if they had the same
# comment body, which would mean that for all comments with the same body all workflows in progress would get cancelled except for the last.
# Downsides with this approach:
# - workflow runs might fail to start because of invalid characters used in comments or because of comment size. Functionally this is not a problem
# because the workflow would always run for the expected comment. However, the workflow history would show fail runs for this error cases =/
# - the purpose of this workflow is to run dotnet format and push changes to the PR. If the workflow is cancelled after the changes are pushed
# to the PR but before the workflow finishes then we end up in a potential invalid state. Meaning, if for instance I want to take an action after the changes are pushed,
# such as adding a comment to the PR, then the workflow could get cancelled before the comment is made on the PR.
# In short, there are parts of the workflow that once started should be finished, the workflow should NOT be allowed to be aborted to avoid getting into
# a bad state.
#
# Mainly because of the second downside I decided to NOT add a concurrency group based on the comment body
#

defaults:
  run:
    shell: pwsh

env:
  STATUS_CONTEXT : ${{ github.workflow }} / dotnet format (${{ github.event_name }}) # mimic format from github checks $workflow-name / $job-name ($event-name)
  WORKFLOW_RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

jobs:
  check-pr-comment:
    name: Check PR comment
    # if: github.event.issue.pull_request && github.event.issue.state == 'open' && github.event.comment.body == '/dotnet format'  # check if the comments come from pull request, exclude those from issue.
    runs-on: ubuntu-latest
    outputs:
      run-dotnet-format: ${{ steps.check-pr-comment.outputs.BOOL_TRIGGERED }}
      pr-number: ${{ steps.check-pr-comment.outputs.PULL_REQUEST_NUMBER }}
      pr-head-sha: ${{ steps.check-pr-comment.outputs.SHA }}
    steps:
    - name: Dump context
      run: Write-Host '${{ toJson(github) }}'
    # - uses: xt0rted/pull-request-comment-branch@v1
    #   id: comment-branch
    # - name: Dump output from xt0rted/pull-request-comment-branch
    #   run: Write-Host '${{ toJson(steps.comment-branch.outputs) }}'
    # - uses: actions/checkout@v2
    #   with:
    #     ref: ${{ steps.comment-branch.outputs.head_ref }}
    # - uses: LouisBrunner/checks-action@v1.2.0
    #   with:
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     sha: ${{ steps.comment-branch.outputs.head_sha }}
    #     name: Test XYZ
    #     conclusion: ${{ job.status }}
    # - name: Create status check
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     $headSha="${{ steps.comment-branch.outputs.head_sha }}"
    #     $body = '{{"name":"myTestCheckPwsh", "head_sha": "{0}", "status": "completed", "conclusion": "success" }}' -f $headSha
    #     $repo = "${{ github.repository }}"
    #     $apiUrl = "https://api.github.com/repos/$repo/check-runs"
    #     $auth = "Authorization: Bearer $env:GITHUB_TOKEN"
    #     Write-Host $auth
    #     curl `
    #       -X POST `
    #       -H $auth `
    #       -H "Accept: application/vnd.github.v3+json" `
    #       $apiUrl -d $body
    # - name: Create status check bash
    #   shell: bash
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     BUILD_COMMIT=${{ steps.comment-branch.outputs.head_sha }}
    #     REPO=${{ github.repository }}
    #     curl \
    #     -X POST \
    #     -H "Authorization: Bearer $GITHUB_TOKEN" \
    #     -H "Accept: application/vnd.github.v3+json" \
    #     https://api.github.com/repos/edumserrano/dot-net-sdk-extensions/check-runs \
    #     -d '{"name":"myTestCheckBash", "head_sha": "'"$BUILD_COMMIT"'", "status": "completed", "conclusion": "success" }'


    - name: check PR comment
      uses: machine-learning-apps/actions-chatops@master
      id: check-pr-comment
      with:
        TRIGGER_PHRASE: "/dotnet format"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Dump output from 'check PR comment' step
      run: Write-Host '${{ toJson(steps.check-pr-comment.outputs) }}'

  dotnet-format:
    name: dotnet format
    needs: [check-pr-comment]
    if: needs.check-pr-comment.outputs.run-dotnet-format == 'True'
    runs-on: ubuntu-latest
    outputs:
      job-id: ${{ steps.get-current-job-id.outputs.job_id }}
    env:
      PR_NUMBER: ${{ needs.check-pr-comment.outputs.pr-number }}
      PR_HEAD_SHA: ${{ needs.check-pr-comment.outputs.pr-head-sha}}
      DOTNET_VERSION : 5.0.303
      SLN_FILENAME: DotNet.Sdk.Extensions.sln
      SLN_FILEPATH : ${{ github.workspace }}/DotNet.Sdk.Extensions.sln
    steps:
    - name: Dump github context
      run: Write-Host '${{ toJson(github) }}'
    - name: Dump job context
      run: Write-Host '${{ toJson(job) }}'
    - name: Set PR status to pending
      uses: niteoweb/pull_request_status_action@v1.0.0
      with:
        pr_number: ${{ env.PR_NUMBER }}
        state: pending
        repository: ${{ github.repository }}
        context: ${{ env.STATUS_CONTEXT }}
        target_url: ${{ env.WORKFLOW_RUN_URL }}
        description: "Expected â€” Waiting for status to be reported"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ env.PR_HEAD_SHA }}
    # - name: Create status
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     $headSha="${{ steps.comment-branch.outputs.head_sha }}"
    #     $repo = "${{ github.repository }}"
    #     $uri = "https://api.github.com/repos/$repo/statuses/$headSha"
    #     $headers = @{
    #       Accept = "application/vnd.github.v3+json"
    #       Authorization = "Bearer ${{ env.GITHUB_TOKEN }}"
    #     }
    #     $body = @{
    #       context = "${{ github.workflow}}"
    #       description = "dotnet format changes pushed"
    #       target_url = "${{ env.WORKFLOW_RUN_URL }}"
    #       state = "success"
    #     } | ConvertTo-Json -compress

    #     Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Install dotnet-format tool
      run:  dotnet tool install --global dotnet-format
    - name: Cache/Restore NuGets
      uses: actions/cache@v2
      with:
        path:
          ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ env.DOTNET_VERSION }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: dotnet format
      run: |
        dotnet format ${{ env.SLN_FILEPATH }} `
          --fix-whitespace `
          --fix-style info `
          --fix-analyzers info `
          --verbosity diagnostic
    - name: Push dotnet format changes
      id: auto-commit-action
      uses: stefanzweifel/git-auto-commit-action@v4.11.0
      with:
        commit_message: dotnet format for PR ${{ env.PR_NUMBER }}
    - name: Add PT comment
      id: add-pr-comment
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $changesDetected = [System.Convert]::ToBoolean("${{ steps.auto-commit-action.outputs.changes_detected }}")
        if($changesDetected) {
          Write-Host "::set-output name=pr-comment-reaction::hooray"
          $commentBody = @"
        :exclamation: **dotnet format** found files that did not respect the code guidelines and pushed commit ${{ steps.auto-commit-action.outputs.commit_hash }}. Please review it before merging the PR.

        For more information please see the output from this [workflow run](${{ env.WORKFLOW_RUN_URL }}).
        "@
        }
        else {
          Write-Host "::set-output name=pr-comment-reaction::confused"
          $commentBody = @"
        :heavy_check_mark: **dotnet format** didn't find any file that does not respect the code guidelines or there weren't any available automated fixes.

         For more information please see the output from this [workflow run](${{ env.WORKFLOW_RUN_URL }}).
        "@
        }

        $commentUrl = gh pr comment ${{ env.PR_NUMBER }} --body $commentBody
        Write-Host "Created comment at $commentUrl"
        $commentId = $commentUrl.Split("-")[-1]
        Write-Host "::set-output name=pr-comment-id::$commentId"
    - name: Add hooray reaction to PR comment
      uses: dkershner6/reaction-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commentId: ${{ steps.add-pr-comment.outputs.pr-comment-id }}
        reaction: ${{ steps.add-pr-comment.outputs.pr-comment-reaction }}
    - name: Get current job id
      id: get-current-job-id
      uses: Tiryoh/gha-jobid-action@v0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        job_name: ${{ github.job }}

  set-final-pr-status:
    name: Set final PR status
    needs: [check-pr-comment, dotnet-format]
    if: always()
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ needs.check-pr-comment.outputs.pr-number }}
      DOTNET_FORMAT_JOB_ID: ${{ needs.dotnet-format.outputs.job-id }}
    steps:
    - name: Dump github context
      run: Write-Host '${{ toJson(github) }}'
    - name: Dump job context
      run: Write-Host '${{ toJson(job) }}'
    - name: Dump needs context
      run: Write-Host '${{ toJson(needs) }}'
    - name: Get dotnet-format job execution time
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $uri = "https://api.github.com/repos/${{ github.repository }}/actions/jobs/${{ env.DOTNET_FORMAT_JOB_ID }}"
        $headers = @{
          Accept = "application/vnd.github.v3+json"
          Authorization = "Bearer ${{ env.GITHUB_TOKEN }}"
        }

        Invoke-RestMethod -Method 'Get' -Uri $uri -Headers $headers
    - name: Set PR status to success
      uses: niteoweb/pull_request_status_action@v1.0.0
      with:
        pr_number: ${{ env.PR_NUMBER }}
        state: success
        repository: ${{ github.repository }}
        context: ${{ env.STATUS_CONTEXT }}
        target_url: ${{ env.WORKFLOW_RUN_URL }}
        description: "Successfull in"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Set PR status to failure
      if: ${{ needs.dotnet-format.result != 'success' || !success() }}
      uses: niteoweb/pull_request_status_action@v1.0.0
      with:
        pr_number: ${{ env.PR_NUMBER }}
        state: failure
        repository: ${{ github.repository }}
        context: ${{ env.STATUS_CONTEXT }}
        target_url: ${{ env.WORKFLOW_RUN_URL }}
        description: "The workflow failed or was cancelled."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}







# add a step to run if pipeline fails to set status check to failure
# Any of the (error | failure | pending | success) states
# STATUS SHOULD MOVE BETWEEN THE FOLLOWING
# Expected -- Waiting for status to be reported
# Successfull in $time (get time from either diff between current time and the github.event.created_at) OR https://github.community/t/get-the-job-elapsed-time/18070 OR https://stackoverflow.com/questions/67890631/how-can-i-get-the-total-build-time-of-a-github-action-workflow
#
# After add comment to PR saying that changes were applied with commit $commitSHA and please review them













    # - name: Checkout
    #   uses: actions/checkout@v2
    # - name: Checkout Pull Request
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: gh pr checkout ${{ github.event.issue.number }}
    # - name: test
    #   run: exit 2


    # - name: Checkout
    #   uses: actions/checkout@v2
    #   with:
    #     ref: ${{ github.event.pull_request.head.sha }}
    # - name: Setup .NET
    #   uses: actions/setup-dotnet@v1
    #   with:
    #     dotnet-version: ${{ env.DOTNET_VERSION }}
    # - name: Install dotnet-format tool
    #   run:  dotnet tool install --global dotnet-format
    # - name: Cache/Restore NuGets
    #   uses: actions/cache@v2
    #   with:
    #     path:
    #       ~/.nuget/packages
    #     key: ${{ runner.os }}-nuget-${{ env.DOTNET_VERSION }}
    #     restore-keys: |
    #       ${{ runner.os }}-nuget-
    # - name: dotnet format check
    #   id: dotnet-format
    #   run: |
    #     Write-Host "::group::Running dotnet format"
    #     dotnet format ${{ env.SLN_FILEPATH }} `
    #       --fix-whitespace `
    #       --fix-style info `
    #       --fix-analyzers info `
    #       --verbosity diagnostic `
    #       --check
    #     Write-Host "::endgroup::"
    #     $hasChanges = $LASTEXITCODE -ne 0
    #     Write-Host "::set-output name=has-changes::$hasChanges"

    #     if($hasChanges) {
    #       Write-Host "::warning::dotnet format found files that require formatting."
    #     }
    #     else {
    #       Write-Host "dotnet format didn't find any file that requires formatting."
    #     }

    #     Exit 0 # always exit successfully
    # - name: GitHub PR comment
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     $hasChanges = [System.Convert]::ToBoolean("${{ steps.dotnet-format.outputs.has-changes }}")
    #     if($hasChanges) {
    #       $commentBody = @"
    #     :exclamation: **dotnet format** found files that do not respect the code guidelines. For more information please see the output from this [workflow run](${{ env.WORKFLOW_RUN_URL }}).

    #     Before merging this PR please fix the reported issues. You can do so by running [dotnet format](https://github.com/dotnet/format) on the solution as such:
    #     ``dotnet format ${{ env.SLN_FILENAME }} --fix-whitespace --fix-style info --fix-analyzers info --verbosity diagnostic``
    #     "@
    #     }
    #     else {
    #       $commentBody = @"
    #     :heavy_check_mark: **dotnet format** didn't find any file that does not respect the code guidelines. For more information please see the output from this [workflow run](${{ env.WORKFLOW_RUN_URL }}).
    #     "@
    #     }

    #     $commentBody += @"


    #     :warning: dotnet format does **NOT** remove unused references. You have to do this manually. Please check that there isn't any unused reference.
    #     "@

    #     $prNumber = "${{github.event.pull_request.number}}"
    #     gh pr comment $prNumber --body $commentBody
    # - name: Set workflow exit status
    #   run: |
    #     $hasChanges = [System.Convert]::ToBoolean("${{ steps.dotnet-format.outputs.has-changes }}")
    #     if($hasChanges) {
    #       Write-Host "dotnet format found files that do not respect the code guidelines so setting the workflow status as failed."
    #       Exit 1
    #     }

    #     Write-Host "dotnet format didn't find any file that does not respect the code guidelines so setting the workflow status as successful."
    #     Exit 0
