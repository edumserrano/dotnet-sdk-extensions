name: PR dotnet format command handler

on:
  issue_comment:
    types: [created]

# Unlike other workflows this one does not have a concurrency defined. If we define a concurrency then a workflow run
# that was triggered by the expected comment could get cancelled by any other following comment added to the pull request.
#
# As an alternative we could consider adding the comment body (github.event.comment.body) to the concurrency group id.
# This would mean that workflows would only get cancelled if they had the same comment body, which would mean that for
# all comments with the same body all workflows in progress would get cancelled except for the last.
#
# Downsides with the approach having the github.event.comment.body as part of the concurrency group id:
#
# - workflow runs might fail to start because of invalid characters used in comments or because of comment size. Functionally this is not a problem
# because the workflow would always run for the expected comment. However, the workflow history would show fail runs for this error cases which is
# not great.
#
# - the purpose of this workflow is to run dotnet format and push changes to the PR. If the workflow is cancelled after the changes are pushed to
# the PR but before the workflow finishes then we end up in a potential invalid state. Meaning, if for instance I want to take an action after the
# changes are pushed, such as adding a comment to the PR, then the workflow could get cancelled before the comment is made on the PR.
# In short, there are parts of the workflow that once started should be finished, the workflow should NOT be allowed to be aborted to avoid getting into
# a bad state.
#
# Mainly because of the second downside I decided to NOT add a concurrency group based on the comment body
#

defaults:
  run:
    shell: pwsh

env:
  DOTNET_FORMAT_JOB_NAME: dotnet format
  STATUS_CONTEXT : ${{ github.workflow }} / dotnet format (${{ github.event_name }}) # mimic format from github checks $workflow-name / $job-name ($event-name)
  WORKFLOW_RUN_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

jobs:
  check-pr-comment:
    name: Check PR comment
    if: github.event.issue.pull_request && github.event.issue.state == 'open' && github.event.comment.body == '/dotnet format'
    runs-on: ubuntu-latest
    outputs:
      run-dotnet-format: ${{ steps.check-pr-comment.outputs.BOOL_TRIGGERED }}
      pr-number: ${{ steps.check-pr-comment.outputs.PULL_REQUEST_NUMBER }}
      pr-head-sha: ${{ steps.check-pr-comment.outputs.SHA }}
      pr-branch-name: ${{ steps.check-pr-comment.outputs.BRANCH_NAME }}
    steps:
    - name: Dump context
      run: Write-Host '${{ toJson(github) }}'
    # - uses: xt0rted/pull-request-comment-branch@v1
    #   id: comment-branch
    # - name: Dump output from xt0rted/pull-request-comment-branch
    #   run: Write-Host '${{ toJson(steps.comment-branch.outputs) }}'
    # - uses: actions/checkout@v2
    #   with:
    #     ref: ${{ steps.comment-branch.outputs.head_ref }}
    # - uses: LouisBrunner/checks-action@v1.2.0
    #   with:
    #     token: ${{ secrets.GITHUB_TOKEN }}
    #     sha: ${{ steps.comment-branch.outputs.head_sha }}
    #     name: Test XYZ
    #     conclusion: ${{ job.status }}



# consider using this create status action because the niteoweb/pull_request_status_action@v1.0.0 action seems to have some python warnings when building the container for the action "Build niteoweb/pull_request_status_action@v1.0.0" "Build container for action use: '/home/runner/work/_actions/niteoweb/pull_request_status_action/v1.0.0/Dockerfile'.":
#  WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
# This probably isn't any serious issue ? Although this build step adds 12 secs to each job where this action is used!!!
#
# using this custom action below also serves as a way to show how these kind of tasks can be accomplish
# this would become a shareable action on this repo

    # - name: Create status check
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     $headSha="${{ steps.comment-branch.outputs.head_sha }}"
    #     $body = '{{"name":"myTestCheckPwsh", "head_sha": "{0}", "status": "completed", "conclusion": "success" }}' -f $headSha
    #     $repo = "${{ github.repository }}"
    #     $apiUrl = "https://api.github.com/repos/$repo/check-runs"
    #     $auth = "Authorization: Bearer $env:GITHUB_TOKEN"
    #     Write-Host $auth
    #     curl `
    #       -X POST `
    #       -H $auth `
    #       -H "Accept: application/vnd.github.v3+json" `
    #       $apiUrl -d $body


    # - name: Create status check bash
    #   shell: bash
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     BUILD_COMMIT=${{ steps.comment-branch.outputs.head_sha }}
    #     REPO=${{ github.repository }}
    #     curl \
    #     -X POST \
    #     -H "Authorization: Bearer $GITHUB_TOKEN" \
    #     -H "Accept: application/vnd.github.v3+json" \
    #     https://api.github.com/repos/edumserrano/dot-net-sdk-extensions/check-runs \
    #     -d '{"name":"myTestCheckBash", "head_sha": "'"$BUILD_COMMIT"'", "status": "completed", "conclusion": "success" }'

    # the check on the workflow covers the required condition to trigger the workflow but the steop below
    # will retrieve require data from the PR to use as outputs of this job
    - name: Check PR comment
      uses: machine-learning-apps/actions-chatops@master
      id: check-pr-comment
      with:
        TRIGGER_PHRASE: "/dotnet format"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Dump output from 'check PR comment' step
      run: Write-Host '${{ toJson(steps.check-pr-comment.outputs) }}'

  dotnet-format:
    name: dotnet format
    needs: [check-pr-comment]
    if: needs.check-pr-comment.outputs.run-dotnet-format == 'True'
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ needs.check-pr-comment.outputs.pr-number }}
      PR_HEAD_SHA: ${{ needs.check-pr-comment.outputs.pr-head-sha}}
      PR_BRANCH_NAME: ${{ needs.check-pr-comment.outputs.pr-branch-name}}
      DOTNET_VERSION : 5.0.303
      SLN_FILENAME: DotNet.Sdk.Extensions.sln
      SLN_FILEPATH : ${{ github.workspace }}/DotNet.Sdk.Extensions.sln
    steps:
    - name: Dump github context
      run: Write-Host '${{ toJson(github) }}'
    - name: Dump job context
      run: Write-Host '${{ toJson(job) }}'
    - name: Add eyes reaction to workflow trigger comment
      uses: dkershner6/reaction-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commentId: ${{ github.event.comment.id }}
        reaction: eyes



    - name: Set PR status to pending
      uses: ./.github/actions/create-gh-status
      # env:
      #   NUGET_PUSH_API_KEY: ${{ secrets.NUGET_PUSH_API_KEY }} # update this on the other action if I can just pass it as a param
      with:
        repo: ${{ github.repository }}
        pr-num: ${{ env.PR_NUMBER }}
        context: ${{ env.STATUS_CONTEXT }}
        state: pending
        description: Waiting for status to be reported
        target-url: ${{ env.WORKFLOW_RUN_URL }}
        token: ${{ secrets.GITHUB_TOKEN }}

    # - name: Set PR status to pending
    #   uses: niteoweb/pull_request_status_action@v1.0.0
    #   with:
    #     pr_number: ${{ env.PR_NUMBER }}
    #     state: pending
    #     repository: ${{ github.repository }}
    #     context: ${{ env.STATUS_CONTEXT }}
    #     target_url: ${{ env.WORKFLOW_RUN_URL }}
    #     description: "Waiting for status to be reported"
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}




    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ env.PR_HEAD_SHA }}
        # From https://docs.github.com/en/actions/reference/authentication-in-a-workflow#using-the-github_token-in-a-workflow
        # "When you use the repository's GITHUB_TOKEN to perform tasks on behalf of
        # the GitHub Actions app, events triggered by the GITHUB_TOKEN will not create a new workflow run."
        #
        # Without using a custom GitHub token the PR commit would be created but no checks would be re-executed.
        token: ${{ secrets.DOTNET_FORMAT_GH_TOKEN }}

    # - name: Create status
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     $headSha="${{ steps.comment-branch.outputs.head_sha }}"
    #     $repo = "${{ github.repository }}"
    #     $uri = "https://api.github.com/repos/$repo/statuses/$headSha"
    #     $headers = @{
    #       Accept = "application/vnd.github.v3+json"
    #       Authorization = "Bearer ${{ env.GITHUB_TOKEN }}"
    #     }
    #     $body = @{
    #       context = "${{ github.workflow}}"
    #       description = "dotnet format changes pushed"
    #       target_url = "${{ env.WORKFLOW_RUN_URL }}"
    #       state = "success"
    #     } | ConvertTo-Json -compress

    #     Invoke-RestMethod -Method 'Post' -Uri $uri -Headers $headers -Body $body

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Install dotnet-format tool
      run:  dotnet tool install --global dotnet-format
    - name: Cache/Restore NuGets
      uses: actions/cache@v2
      with:
        path:
          ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ env.DOTNET_VERSION }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: dotnet format
      run: |
        dotnet format ${{ env.SLN_FILEPATH }} `
          --fix-whitespace `
          --fix-style info `
          --fix-analyzers info `
          --verbosity diagnostic
    - name: Push dotnet format changes
      id: auto-commit-action
      uses: stefanzweifel/git-auto-commit-action@v4.11.0
      with:
        branch: ${{ env.PR_BRANCH_NAME }}
        commit_message: dotnet format for PR ${{ env.PR_NUMBER }}
    - name: Add PR comment
      id: add-pr-comment
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $commentBody = @"
        `# [${{ github.workflow }}](${{ env.WORKFLOW_RUN_URL }})

        "@
        $changesDetected = [System.Convert]::ToBoolean("${{ steps.auto-commit-action.outputs.changes_detected }}")
        if($changesDetected) {
          Write-Host "::set-output name=pr-comment-reaction::eyes"
          $lastCommitHash = git rev-parse HEAD
          $commentBody += ":exclamation: **dotnet format** found files that did not respect the code guidelines and pushed commit $lastCommitHash. Please review it before merging the PR."
        }
        else {
          Write-Host "::set-output name=pr-comment-reaction::hooray"
          $commentBody += ":heavy_check_mark: **dotnet format** didn't find any file that does not respect the code guidelines or there weren't any available automated fixes."
        }

        $commentBody += @"


        ## Note
        Sometimes the fix provided by the analyzers produces unecessary comments when formatting files.

        This should only happen if the project supports multiple target frameworks and the fix doesn't produce the same output for all. However, it seems that sometimes the ``Unmerged change from project ...`` comment shows up even though the fix produced the same output.

        If this happens, just delete the comments added. Otherwise, consider incorporating the commented out code using [preprocessor directives to control conditional compilation](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/preprocessor-directives#conditional-compilation).
        Example:
        ``````csharp
        #if NET5_0
            ...
        #elif NETCOREAPP3_1
            ...
        #endif
        ``````
        "@

        $commentUrl = gh pr comment ${{ env.PR_NUMBER }} --body $commentBody
        Write-Host "Created comment at $commentUrl"
        $commentId = $commentUrl.Split("-")[-1]
        Write-Host "::set-output name=pr-comment-id::$commentId"
    - name: Add hooray reaction to PR comment
      uses: dkershner6/reaction-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commentId: ${{ steps.add-pr-comment.outputs.pr-comment-id }}
        reaction: ${{ steps.add-pr-comment.outputs.pr-comment-reaction }}

  set-final-pr-status:
    name: Set final PR status
    needs: [check-pr-comment, dotnet-format]
    if: needs.check-pr-comment.outputs.run-dotnet-format == 'True'
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ needs.check-pr-comment.outputs.pr-number }}
    steps:
    - name: Dump github context
      run: Write-Host '${{ toJson(github) }}'
    - name: Dump job context
      run: Write-Host '${{ toJson(job) }}'
    - name: Dump needs context
      run: Write-Host '${{ toJson(needs) }}'
    - name: Get dotnet-format job execution time
      id: get-job-execution-time
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $uri = "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs"
        $headers = @{
          Accept = "application/vnd.github.v3+json"
          Authorization = "Bearer ${{ env.GITHUB_TOKEN }}"
        }

        $response = Invoke-RestMethod -Method 'Get' -Uri $uri -Headers $headers
        $jobStartTime = $response.jobs.where{$_.name -eq '${{ env.DOTNET_FORMAT_JOB_NAME }}'}.started_at
        $jobEndTime = $response.jobs.where{$_.name -eq '${{ env.DOTNET_FORMAT_JOB_NAME }}'}.completed_at
        $jobDuration = $jobEndTime - $jobStartTime
        if($jobDuration.Minutes -eq 0) {
          $jobDurationInSeconds = $jobDuration.Seconds
          $jobDurationAsString = "${jobDurationInSeconds}s"
        }
        else{
          $jobDurationInMinutes = [Math]::Round($jobDuration.TotalMinutes)
          $jobDurationAsString = "${jobDurationInMinutes}m"
        }

        Write-Host "::set-output name=dotnet-format-job-duration::$jobDurationAsString"
    # - name: Set PR status to success
    #   uses: niteoweb/pull_request_status_action@v1.0.0
    #   with:
    #     pr_number: ${{ env.PR_NUMBER }}
    #     state: success
    #     repository: ${{ github.repository }}
    #     context: ${{ env.STATUS_CONTEXT }}
    #     target_url: ${{ env.WORKFLOW_RUN_URL }}
    #     description: "Successful in ${{ steps.get-job-execution-time.outputs.dotnet-format-job-duration }}"
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    # need step to get the latest sha from PR


    - name: Set PR status to success
      uses: ./.github/actions/create-gh-status
      # env:
      #   NUGET_PUSH_API_KEY: ${{ secrets.NUGET_PUSH_API_KEY }} # update this on the other action if I can just pass it as a param
      with:
        repo: ${{ github.repository }}
        pr-num: ${{ env.PR_NUMBER }}
        context: ${{ env.STATUS_CONTEXT }}
        state: success
        description: Successful in ${{ steps.get-job-execution-time.outputs.dotnet-format-job-duration }}
        target-url: ${{ env.WORKFLOW_RUN_URL }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Set PR status to failure
      if: ${{ needs.dotnet-format.result != 'success' || !success() }}
      uses: niteoweb/pull_request_status_action@v1.0.0
      with:
        pr_number: ${{ env.PR_NUMBER }}
        state: failure
        repository: ${{ github.repository }}
        context: ${{ env.STATUS_CONTEXT }}
        target_url: ${{ env.WORKFLOW_RUN_URL }}
        description: "Workflow failed or cancelled"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}



# git config --local user.name "actions-user"
# git config --local user.email "actions-user@github.com"
# git commit -a -m "auto dotnet format attempt number $attempt"
# git push

