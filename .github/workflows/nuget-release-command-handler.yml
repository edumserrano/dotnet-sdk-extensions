name: NuGet release command handler

on:
  repository_dispatch:
    types: [nuget-release-command]

env:
  NUGET_RELEASE_LABEL : nuget-release

defaults:
  run:
    shell: pwsh

jobs:
  check-pr:
    name: Check for open NuGet release PR
    environment: no-secrets-workflow
    permissions:
      contents: read
      pull-requests: read
    runs-on: ubuntu-latest
    outputs:
      can-create-pr: ${{ steps.open-pr-check.outputs.can-create-pr }}
    steps:
    - name: Dump github context for debug purposes
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: $env:GITHUB_CONTEXT
    - name: Checkout repository
      uses: actions/checkout@v3.1.0
    - name: Check for open dotnet format PRs
      id: open-pr-check
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $nugetId = "${{ github.event.client_payload.nugetId }}"
        $openPullRequestsResult = gh pr list --state open --label ${{ env.NUGET_RELEASE_LABEL }} --label $nugetId
        $canCreatePr = [string]::IsNullOrEmpty($openPullRequestsResult)
        Write-Output "::set-output name=can-create-pr::$canCreatePr"
    - name: Log info
      run: |
        $nugetId = "${{ github.event.client_payload.nugetId }}"
        $canCreatePr = [System.Convert]::ToBoolean("${{ steps.open-pr-check.outputs.can-create-pr }}")

        if($canCreatePr) {
          Write-Output "::notice::There's no open PR to release $nugetId NuGet."
        }
        else {
          Write-Output "::warning::A PR to release $nugetId NuGet is already open so a new one will not be created. Only one NuGet release PR can be open at a time."
        }

  create-pr:
    name: Create NuGet release PR
    needs: [check-pr]
    if: needs.check-pr.outputs.can-create-pr == 'true'
    environment: nuget-release-command-handler-workflow
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    outputs:
      pr-number: ${{ steps.create-pr.outputs.pr-number }}
      nuget-id: ${{ steps.slash-command-args.outputs.nuget-id }}
      nuget-version: ${{ steps.slash-command-args.outputs.nuget-new-version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3.1.0
    - name: Read slash command args and setup workflow data
      id: slash-command-args
      run: |
        $nugetId = "${{ github.event.client_payload.nugetId }}"
        $nugetNewVersion = "${{ github.event.client_payload.nugetVersion }}"
        $nugetUrl = "https://www.nuget.org/packages/$nugetId"

        $nugetOutput = nuget list PackageId:$nugetId -Source nuget.org -PreRelease
        $nugetCurrentVersion = $nugetOutput.Split(" ")[-1]

        Write-Output "nuget-id=$nugetId"
        Write-Output "nuget-new-version=$nugetNewVersion"
        Write-Output "nuget-url=$nugetUrl"
        Write-Output "current-nuget-new-version=$nugetCurrentVersion"
        Write-Output "::set-output name=nuget-id::$nugetId"
        Write-Output "::set-output name=nuget-new-version::$nugetNewVersion"
        Write-Output "::set-output name=nuget-url::$nugetUrl"
        Write-Output "::set-output name=nuget-current-version::$nugetCurrentVersion"
    - name: Prepare commit info
      id: commit-info
      run: |
        $nugetId = "${{ steps.slash-command-args.outputs.nuget-id }}";
        $nugetNewVersion = "${{ steps.slash-command-args.outputs.nuget-new-version }}";
        $branchName = "nuget-release/$nugetId-$nugetNewVersion"
        $commitMessage = "Release NuGet $nugetId $nugetNewVersion"
        Write-Output "::set-output name=branch-name::$branchName"
        Write-Output "Branch name set to $branchName"
        Write-Output "::set-output name=commit-message::$commitMessage"
        Write-Output "Commit message set to $commitMessage"
    - name: Git checkout new branch
      run: |
        git checkout -b ${{ steps.commit-info.outputs.branch-name }}
    - name: Set DotNet.Sdk.Extensions version
      if: steps.slash-command-args.outputs.nuget-id == 'dotnet-sdk-extensions'
      run: |
        $projFilePath = "${{ github.workspace }}/src/DotNet.Sdk.Extensions/DotNet.Sdk.Extensions.csproj"

        Write-Output "::group::csproj before updating version"
        cat $projFilePath
        Write-Output "::endgroup::"

        $xml=New-Object XML
        $xml.PreserveWhitespace = $true
        $xml.Load($projFilePath)
        $xml.Project.PropertyGroup.Version = "${{ steps.slash-command-args.outputs.nuget-new-version }}"
        $xml.Save($projFilePath)

        Write-Output "::group::csproj after updating version"
        cat $projFilePath
        Write-Output "::endgroup::"
    - name: Set DotNet.Sdk.Extensions.Testing version
      if: steps.slash-command-args.outputs.nuget-id == 'dotnet-sdk-extensions-testing'
      run: |
        $projFilePath = "${{ github.workspace }}/src/DotNet.Sdk.Extensions.Testing/DotNet.Sdk.Extensions.Testing.csproj"

        Write-Output "::group::csproj before updating version"
        cat $projFilePath
        Write-Output "::endgroup::"

        $xml=New-Object XML
        $xml.PreserveWhitespace = $true
        $xml.Load($projFilePath)
        $xml.Project.PropertyGroup.Version = "${{ steps.slash-command-args.outputs.nuget-new-version }}"
        $xml.Save($projFilePath)

        Write-Output "::group::csproj after updating version"
        cat $projFilePath
        Write-Output "::endgroup::"
    - name: Push changes to branch
      id: auto-commit-action
      uses: stefanzweifel/git-auto-commit-action@v4.15.2
      with:
        commit_message: ${{ steps.commit-info.outputs.commit-message }}
        branch: ${{ steps.commit-info.outputs.branch-name }}
    - name: Render PR body template
      id: render-pr-body-template
      uses: chuhlomin/render-template@v1.5
      with:
        template: .github/workflows/templates/nuget-release-command-handler/create-nuget-release-pr-body.md
        vars: |
          nugetId: ${{ steps.slash-command-args.outputs.nuget-id }}
          nugetCurrentVersion: ${{ steps.slash-command-args.outputs.nuget-current-version }}
          nugetNewVersion: ${{ steps.slash-command-args.outputs.nuget-new-version }}
          nugetUrl: '${{ steps.slash-command-args.outputs.nuget-url }}'
          issueNumber: ${{ github.event.client_payload.issueNumber }}
    - name: Create NuGet release PR
      id: create-pr
      env:
        GITHUB_TOKEN: ${{ secrets.CREATE_NUGET_RELEASE_PR_GH_TOKEN }}
      run: |
        $title = "Release NuGet ${{ steps.slash-command-args.outputs.nuget-id }} ${{ steps.slash-command-args.outputs.nuget-new-version }}"
        $body = @'
        ${{ steps.render-pr-body-template.outputs.result }}
        '@
        $prUrl = gh pr create `
          --title $title `
          --body $body `
          --label ${{ env.NUGET_RELEASE_LABEL }} `
          --label ${{ steps.slash-command-args.outputs.nuget-id }} `
          --label bot:robot:
        $prNumber = $prUrl.Split("/")[-1]
        Write-Output "::set-output name=pr-url::$prUrl"
        Write-Output "::set-output name=pr-number::$prNumber"
    - name: Log info
      run: |
        $prUrl = "${{ steps.create-pr.outputs.pr-url }}"
        Write-Output "::notice title=NuGet release::A PR to release NuGet ${{ steps.slash-command-args.outputs.nuget-id }} ${{ steps.slash-command-args.outputs.nuget-new-version }} was created at $prUrl."

  release-info:
    name: Upload release info
    needs: [create-pr]
    environment: nuget-release-command-handler-workflow
    permissions:
      contents: read
      statuses: write
    runs-on: ubuntu-latest
    env:
      RELEASE_NOTES_ARTIFACT_FILEPATH: ${{github.workspace}}/nuget-release-notes.md
      RELEASE_INFO_ARTIFACT_FILEPATH: ${{github.workspace}}/nuget-release-info.md
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3.1.0
    - name: Save release notes to file
      run: |
        $releaseNotes = '${{ github.event.client_payload.customReleaseNotes }}'
        $releaseNotes > ${{ env.RELEASE_NOTES_ARTIFACT_FILEPATH }}
        cat ${{ env.RELEASE_NOTES_ARTIFACT_FILEPATH }}
    - name: Upload release notes
      uses: actions/upload-artifact@v3.1.0
      with:
        name: nuget-release-notes
        path: ${{ env.RELEASE_NOTES_ARTIFACT_FILEPATH }}
    - name: Save release info to file
      run: |
        $releaseInfo = @{
          issueNumber = ${{ github.event.client_payload.issueNumber }}
          nugetId = "${{ needs.create-pr.outputs.nuget-id }}"
          nugetVersion = "${{ needs.create-pr.outputs.nuget-version }}"
          autoGenerateReleaseNotes = "${{ github.event.client_payload.autoGenerateReleaseNotes }}"
        }
        $releaseInfoAsJson = $releaseInfo | ConvertTo-Json
        $releaseInfoAsJson > ${{ env.RELEASE_INFO_ARTIFACT_FILEPATH }}
        cat ${{ env.RELEASE_INFO_ARTIFACT_FILEPATH }}
    - name: Upload release info
      uses: actions/upload-artifact@v3.1.0
      with:
        name: nuget-release-info
        path: ${{ env.RELEASE_INFO_ARTIFACT_FILEPATH }}
    - name: Set PR status
      uses: ./.github/actions/create-gh-status
      with:
        repo: ${{ github.repository }}
        pr-num: ${{ needs.create-pr.outputs.pr-number }}
        context: '${{ github.workflow }} / NuGet release info (${{ github.event_name }})' # mimic format from github
        state: success
        description: Successful
        target-url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        token: ${{ secrets.GITHUB_TOKEN }}

  merge-pr:
    name: Set PR auto merge
    needs: [create-pr, release-info]
    environment: nuget-release-command-handler-workflow
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3.1.0
    - name: Set PR auto merge
      env:
        GITHUB_TOKEN: ${{ secrets.REPOSITORY_DISPATCH_GH_TOKEN }}
      run: |
        gh pr merge --auto --squash --delete-branch ${{ needs.create-pr.outputs.pr-number }}

  output-artifacts:
    name: Create output artifacts
    needs: [create-pr, merge-pr]
    if: always()
    environment: nuget-release-command-handler-workflow
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3.1.0
    - name: Setup NuGet release flow info
      id: set-nuget-release-flow-info
      run: |
        $workflowResult = '${{ needs.merge-pr.result }}'
        if($workflowResult -eq 'success') {
          $workflowStatus = "ok"
          $releaseStatus = "in%20progress"
          $releaseBadgeColor = "blue"
        }
        else {
          $workflowStatus = "error"
          $releaseStatus = "failed"
          $releaseBadgeColor = "red"
        }

        Write-Output "::set-output name=nuget-release-status::$releaseStatus"
        Write-Output "::set-output name=nuget-release-badge-color::$releaseBadgeColor"
        Write-Output "::set-output name=nuget-release-command-handler-node-status::$workflowStatus"
    - name: Upload NuGet release flow info artifact
      uses: ./.github/actions/create-nuget-release-flow-info-artifact
      with:
        issue-number: '${{ github.event.client_payload.issueNumber }}'
        nuget-release-status: '${{ steps.set-nuget-release-flow-info.outputs.nuget-release-status }}'
        nuget-release-badge-color: '${{ steps.set-nuget-release-flow-info.outputs.nuget-release-badge-color }}'
        nuget-release-command-handler-node-status: '${{ steps.set-nuget-release-flow-info.outputs.nuget-release-command-handler-node-status }}'
        nuget-release-command-handler-url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
