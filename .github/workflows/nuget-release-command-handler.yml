# When making changes to this file please update the corresponding documentation which can be found at /docs/dev-notes/workflows/nuget-release-command-handler-workflow.md

name: NuGet release command handler

on:
  repository_dispatch:
    types: [nuget-release-command]


env:
  NUGET_RELEASE_LABEL : nuget-release

defaults:
  run:
    shell: pwsh

jobs:
  check-pr:
    name: Check for open NuGet release PR
    environment: no-secrets-workflow
    permissions:
      contents: read
      pull-requests: read
    runs-on: ubuntu-latest
    outputs:
      can-create-pr: ${{ steps.open-pr-check.outputs.can-create-pr }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Check for open dotnet format PRs
      id: open-pr-check
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $projName = "${{ github.event.client_payload.slash_command.args.unnamed.arg1 }}"
        $openPullRequestsResult = gh pr list --state open --label ${{ env.NUGET_RELEASE_LABEL }} --label $projName
        $canCreatePr = [string]::IsNullOrEmpty($openPullRequestsResult)
        Write-Host "::set-output name=can-create-pr::$canCreatePr"
    - name: Log info
      run: |
        $projName = "${{ github.event.client_payload.slash_command.args.unnamed.arg1 }}"
        $canCreatePr = [System.Convert]::ToBoolean("${{ steps.open-pr-check.outputs.can-create-pr }}")

        if($canCreatePr) {
          Write-Host "::notice::There's no open PR to release $projName NuGet."
        }
        elseif($hasChanges -and !$canCreatePr) {
          Write-Host "::warning::A PR to release $projName NuGet is already open so a new one will not be created. Only one NuGet release PR can be open at a time."
        }

  create-pr:
    name: Create NuGet release PR
    needs: [check-pr]
    if: needs.check-pr.outputs.can-create-pr == 'true'
    environment: nuget-release-command-handler-workflow
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
    - name: Dump github context
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: $env:GITHUB_CONTEXT
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Read slash command args
      id: slash-command-args
      run: |
        Write-Host "proj-name=${{ github.event.client_payload.slash_command.args.unnamed.arg2 }}"
        Write-Host "nuget-version=${{ github.event.client_payload.slash_command.args.unnamed.arg2 }}"
        Write-Host "::set-output name=proj-name::${{ github.event.client_payload.slash_command.args.unnamed.arg1 }}"
        Write-Host "::set-output name=nuget-version::${{ github.event.client_payload.slash_command.args.unnamed.arg2 }}"
    - name: Prepare commit info
      id: commit-info
      run: |
        $projName = "${{ steps.slash-command-args.outputs.proj-name }}";
        $nugetVersion = "${{ steps.slash-command-args.outputs.nuget-version }}";
        $branchName = "nuget-release/$projName-$nugetVersion"
        $commitMessage = "release NuGet $projName $nugetVersion"
        Write-Host "::set-output name=branch-name::$branchName"
        Write-Host "Branch name set to $branchName"
        Write-Host "::set-output name=commit-message::$commitMessage"
        Write-Host "Commit message set to $commitMessage"
    - name: Git checkout new branch
      run: |
        git checkout -b ${{ steps.commit-info.outputs.branch-name }}
    - name: Set DotNet.Sdk.Extensions version
      if: steps.slash-command-args.outputs.proj-name == 'dotnet.sdk.extensions'
      run: |
        $xml=New-Object XML
        $xml.PreserveWhitespace = $true
        $xml.Load("${{ github.workspace }}/src/DotNet.Sdk.Extensions/DotNet.Sdk.Extensions.csproj")
        $xml.Project.PropertyGroup.Version = "${{ steps.slash-command-args.outputs.nuget-version }}"
        $xml.Save("D:\Dev\edumserrano\dot-net-sdk-extensions\src\DotNet.Sdk.Extensions\DotNet.Sdk.Extensions.csproj")
    - name: Set DotNet.Sdk.Extensions.Testing version
      if: steps.slash-command-args.outputs.proj-name == 'dotnet.sdk.extensions.testing'
      run: |
        $xml=New-Object XML
        $xml.PreserveWhitespace = $true
        $xml.Load("${{ github.workspace }}/src/DotNet.Sdk.Extensions/DotNet.Sdk.Extensions.Testing.csproj")
        $xml.Project.PropertyGroup.Version = "${{ steps.slash-command-args.outputs.nuget-version }}"
        $xml.Save("D:\Dev\edumserrano\dot-net-sdk-extensions\src\DotNet.Sdk.Extensions\DotNet.Sdk.Extensions.csproj")
    - name: Push changes to branch
      id: auto-commit-action
      uses: stefanzweifel/git-auto-commit-action@v4.13.1
      with:
        commit_message: ${{ steps.commit-info.outputs.commit-message }}
        branch: ${{ steps.commit-info.outputs.branch-name }}
    - name: Render PR body template
      id: render-pr-body-template
      uses: chuhlomin/render-template@v1.4
      with:
        template: .github/workflows/templates/nuget-release/create-nuget-release.md
        vars: |
          projName: ${{ steps.slash-command-args.outputs.proj-name }}
          nugetCurrentVersion: "TODO-CURRENT-VERSION"
          nugetNewVersion: ${{ steps.slash-command-args.outputs.nuget-version }}
          nugetUrl: "TODO-URL"
          issueNumber: ${{ github.event.client_payload.github.payload.issue.number }}
          workflow: ${{ github.event.client_payload.github.workflow  }}
          commitSha: ${{ github.event.client_payload.github.sha }}
    - name: Sanitize PR body
      id: sanitize-pr-body
      run: |
        $body = "${{ steps.render-pr-body-template.outputs.result }}"
        $body = $body -replace "`n","%0A" # The content must be escaped to preserve newlines. See https://github.community/t/set-output-truncates-multiline-strings/16852/3
        Write-Host "::set-output name=pr-body::$body"
    - name: Create NuGet release PR
      id: create-pr
      env:
        GITHUB_TOKEN: ${{ secrets.CREATE_NUGET_RELEASE_PR_GH_TOKEN }}
      run: |
        $title = "Release NuGet ${{ steps.slash-command-args.outputs.proj-name }} ${{ steps.slash-command-args.outputs.nuget-version }}"
        $body = "${{ steps.sanitize-pr-body.outputs.pr-body }}"
        $prUrl = gh pr create `
          --title $title `
          --body $body `
          --label ${{ env.NUGET_RELEASE_LABEL }} `
          --label ${{ steps.slash-command-args.outputs.proj-name }} `
          --label bot:robot:
        $prNumber = $prUrl.Split("/")[-1]
        Write-Host "::set-output name=pr-url::$prUrl"
        Write-Host "::set-output name=pr-number::$prNumber"
    - name: Log info
      run: |
        $prUrl = "${{ steps.create-pr.outputs.pr-url }}"
        Write-Host "::notice title=NuGet release::A PR to release NuGet ${{ steps.slash-command-args.outputs.proj-name }} ${{ steps.slash-command-args.outputs.nuget-version }} was created at $prUrl."
    - name: Set auto merge PR
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh pr merge --auto --squash --delete-branch ${{ steps.create-pr.outputs.pr-number }}
