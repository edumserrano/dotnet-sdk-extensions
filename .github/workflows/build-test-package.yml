name: Build, test and package

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
    - "**.md"
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0' # Once a week: "At 00:00 on Sunday."

defaults:
  run:
    shell: pwsh

jobs:
  main:
    name: Build, test and package
    environment: no-secrets-workflow
    permissions:
      contents: read
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      SLN_FILEPATH: ${{github.workspace}}/DotNet.Sdk.Extensions.sln
      EXTENSIONS_CSPROJ_FILEPATH : ${{ github.workspace }}/src/DotNet.Sdk.Extensions/DotNet.Sdk.Extensions.csproj
      EXTENSIONS_BIN_FOLDER : ${{ github.workspace }}/src/DotNet.Sdk.Extensions/bin/Release
      TESTING_EXTENSIONS_CSPROJ_FILEPATH : ${{ github.workspace }}/src/DotNet.Sdk.Extensions.Testing/DotNet.Sdk.Extensions.Testing.csproj
      TESTING_EXTENSIONS_BIN_FOLDER : ${{ github.workspace }}/src/DotNet.Sdk.Extensions.Testing/bin/Release

      TEST_COVERAGE_REPORT_DIR: tests/${{ matrix.os }}/coverage-results/report
      TEST_RESULTS_ARTIFACT_NAME: test-results-${{ matrix.os }}

      CODE_COVERAGE_ARTIFACT_NAME: code-coverage-report-${{ matrix.os }}
      NUGET_ARTIFACT_NAME : nuget-packages-and-symbols
    steps:
    - name: Dump github context for debug purposes
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: $env:GITHUB_CONTEXT
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          3.1.x
          5.0.x
          6.0.x
          7.0.x
    - name: Cache/Restore NuGets
      uses: actions/cache@v3
      with:
        path:
          ~/.nuget/packages
        key: ${{ runner.os }}-nuget
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: Install reportgenerator dotnet tool
      run:  dotnet tool install --global dotnet-reportgenerator-globaltool
    - name: Restore dependencies
      run: dotnet restore ${{ env.SLN_FILEPATH }}
    - name: Build
      run: dotnet build ${{ env.SLN_FILEPATH }} -c Release -warnaserror --no-restore --no-incremental
    - name: Test and code coverage
      id: dotnet-test
      run: |
        $os = $PSVersionTable.OS

        $testResultsDir = $(Join-Path -Path (Get-Location) -ChildPath "tests/${{ matrix.os }}/test-results")
        $testCoverageDir = $(Join-Path -Path (Get-Location) -ChildPath "tests/${{ matrix.os }}/coverage-results/")
        $testCoverageFile = $(Join-Path -Path $testCoverageDir -ChildPath "coverage.net7.0.opencover.xml")
        Write-Output "test-results-dir=$testResultsDir" >> $env:GITHUB_OUTPUT
        Write-Output "test-coverage-dir=$testCoverageDir" >> $env:GITHUB_OUTPUT
        Write-Output "test-coverage-file=$testCoverageFile" >> $env:GITHUB_OUTPUT

        $downloadArtifactMessage = "You can inspect the test results by downloading the workflow artifact named: ${{ env.TEST_RESULTS_ARTIFACT_NAME }}."
        $frameworkMonikers = @('netcoreapp3.1','net5.0','net6.0','net7.0')
        foreach($frameworkMoniker in $frameworkMonikers)
        {
          Write-Output "::group::Running dotnet test for target framework $frameworkMoniker."
          $testCoverageMergeFile = $(Join-Path -Path $testCoverageDir -ChildPath "coverage.$frameworkMoniker.json")
          Write-Output "testCoverageMergeFile=$testCoverageMergeFile"
          dotnet test ${{ env.SLN_FILEPATH }} `
            -c Release `
            --no-build `
            --framework $frameworkMoniker `
            --logger "trx;LogFilePrefix=framework" `
            --logger GitHubActions `
            --logger "liquid.custom;Template=${{github.workspace}}/tests/liquid-test-logger-template.md;runnerOS=${{ matrix.os }};os=$os;LogFilePrefix=framework" `
            --results-directory "$testResultsDir" `
            /p:CollectCoverage=true `
            /p:CoverletOutput="$testCoverageDir" `
            /p:MergeWith="$testCoverageMergeFile" `
            /p:CoverletOutputFormat="json%2copencover" `
            -m:1

          if($LASTEXITCODE -ne 0)
          {
            Write-Output "::error title=Tests (${{ matrix.os }})::Tests failed on ${{ matrix.os }}. $downloadArtifactMessage"
          }

          Write-Output "::endgroup::"
        }

        Write-Output "::group::Test output directories."
        Write-Output "test-results-dir is set to $testResultsDir"
        Write-Output "test-coverage-dir is set to $testCoverageDir"
        Write-Output "test-coverage-file is set to $testCoverageFile"
        Write-Output "::endgroup::"

        Write-Output "::notice title=Tests (${{ matrix.os }})::Tests passed on ${{ matrix.os }}. $downloadArtifactMessage"
    - name: Package DotNet.Sdk.Extensions
      if: matrix.os == 'ubuntu-latest'  # this job is on a matrix run but I only want to build the NuGet once
      run: dotnet pack ${{ env.EXTENSIONS_CSPROJ_FILEPATH }} -c Release --no-build
    - name: Package DotNet.Sdk.Extensions.Testing
      if: matrix.os == 'ubuntu-latest'  # this job is on a matrix run but I only want to build the NuGet once
      run: dotnet pack ${{ env.TESTING_EXTENSIONS_CSPROJ_FILEPATH }} -c Release --no-build
    - name: Upload NuGets and symbols to artifacts
      id: upload-nuget-artifacts
      uses: actions/upload-artifact@v3
      if: matrix.os == 'ubuntu-latest'  # this job is on a matrix run but I only want to upload NuGets as artifacts once
      with:
        name: ${{ env.NUGET_ARTIFACT_NAME }}
        path: |
          ${{ env.EXTENSIONS_BIN_FOLDER }}/*.nupkg
          ${{ env.EXTENSIONS_BIN_FOLDER }}/*.snupkg
          ${{ env.TESTING_EXTENSIONS_BIN_FOLDER }}/*.nupkg
          ${{ env.TESTING_EXTENSIONS_BIN_FOLDER }}/*.snupkg
    - name: Set run even if fail conditions
      id: even-if-fail
      if: always()
      run: |
        # Some of the steps below provide feedback on the test run and I want to run them even if
        # some of the previous steps failed. For that I need:
        # - the 'always()' condition: without it the step only runs if the job is successful, it's like the 'if' condition on any step always has a hidden '&& success()' clause.
        # - the '(steps.<step-id>.conclusion == 'success' || steps.<step-id>.conclusion == 'failure')' condition: to run the steps only if the <step-id> step has ran, regardless
        # if it failed or not. It won't run if the <step-id> step has been skipped or cancelled.
        #
        # As such, the output from this step is meant to be used on the 'if' property of steps as follows:
        # if: steps.even-if-tests-fail.outputs.condition == 'true' && always()

        $testsCondition = '${{ (steps.dotnet-test.conclusion == 'success' || steps.dotnet-test.conclusion == 'failure') }}'
        $nugetsCondition = '${{ (steps.upload-nuget-artifacts.conclusion == 'success' || steps.dotnet-test.conclusion == 'failure') }}'
        Write-Output "tests-condition=$testsCondition" >> $env:GITHUB_OUTPUT
        Write-Output "nugets-condition=$nugetsCondition" >> $env:GITHUB_OUTPUT
        Write-Output "tests-condition is set to $testsCondition"
        Write-Output "nugets-condition is set to $nugetsCondition"
    - name: Log NuGet artifacts info
      if: steps.even-if-fail.outputs.nugets-condition == 'true' && always()
      run: |
        Write-Output "::notice title=NuGets::You can download the NuGet packages and symbols from the worfklow artifact named: ${{ env.NUGET_ARTIFACT_NAME }}."
    - name: Generate code coverage report
      id: code-coverage-report-generator
      if: steps.even-if-fail.outputs.tests-condition == 'true' && always()
      run: |
        $testCoverageReportDir = $(Join-Path -Path ${{ steps.dotnet-test.outputs.test-coverage-dir }} -ChildPath "report")
        Write-Output "test-coverage-report-dir=$testCoverageReportDir" >> $env:GITHUB_OUTPUT
        reportgenerator `
          "-reports:${{ steps.dotnet-test.outputs.test-coverage-file }}" `
          "-targetdir:$testCoverageReportDir" `
          -reportTypes:htmlInline
    - name: Upload code coverage report to artifacts
      if: steps.even-if-fail.outputs.tests-condition == 'true' && always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.CODE_COVERAGE_ARTIFACT_NAME }}
        path: ${{ steps.code-coverage-report-generator.outputs.test-coverage-report-dir }}
    - name: Rename test results files
      if: steps.even-if-fail.outputs.tests-condition == 'true' && always()
      run: |
        # When re-running a job it will upload the test results artifact multiple times.
        # The artifacts work as a share so if the files have the same name they get overwriten, if not they get added to.
        # If I don't run this to make sure the filenames are deterministic then on job reruns I get acumulating test results from past runs because the filenames for the test results are all different.

        $testResultsDir = '${{ steps.dotnet-test.outputs.test-results-dir }}'
        # rename test result files for all frameworks
        $frameworkFilters = @('framework_netcoreapp3.1*','framework_net5.0*','framework_net6.0*','framework_net7.0*')
        foreach($frameworkFilter in $frameworkFilters)
        {
            # for each framework group the files by extension. There will be .md and .trx file groups
            $frameworkFiles = Get-ChildItem -Path $testResultsDir -Recurse -Filter $frameworkFilter | Group-Object -Property Extension
            foreach($extensionFilesGroup in $frameworkFiles)
            {
                # rename all the files in each group by adding a deterministic suffix. Since the count of the files in each group does not change
                # between workflow runs we can use that as a deterministic suffix.
                for ($i = 0; $i -lt $extensionFilesGroup.Count; $i++)
                {
                    $file = $extensionFilesGroup.Group[$i]
                    $extension = $file.Extension
                    $frameworkPrefix = $frameworkFilter -replace '\*', ''
                    Rename-Item -Path $file -NewName "$frameworkPrefix`_$i$extension"
                }
            }
        }
    - name: Upload test results to artifacts
      if: steps.even-if-fail.outputs.tests-condition == 'true' && always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.TEST_RESULTS_ARTIFACT_NAME }}
        path: ${{ steps.dotnet-test.outputs.test-results-dir }}
    - name: Upload test coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest'  # this job is on a matrix run but I only want to upload code coverage to Codecov once
      with:
        files: ${{ steps.dotnet-test.outputs.test-coverage-file }}
        fail_ci_if_error: true
    - name: Log Codecov info
      run: |
        $codeCoveUrl = "https://app.codecov.io/gh/${{ github.repository }}/"
        Write-Output "::notice title=Code coverage (${{ matrix.os }})::Code coverage has been uploaded to Codecov at $codeCoveUrl. You can download the code coverage report from the workflow artifact named: ${{ env.CODE_COVERAGE_ARTIFACT_NAME }}."
