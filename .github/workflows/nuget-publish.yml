# When making changes to this file please update the corresponding documentation which can be found at /docs/dev-notes/workflows/nuget-publish-workflow.md

name: Publish NuGet packages

on:
  pull_request:
    branches: [ main ]
    types: [ closed ]

defaults:
  run:
    shell: pwsh

jobs:
  main:
    name: Publish NuGet package and symbols
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'nuget-release')
    environment: nuget-push-workflow
    permissions:
      contents: write
      issues: write
    runs-on: ubuntu-latest
    env:
      EXTENSIONS_NUGET_BIN_FOLDER : ${{ github.workspace }}/DotNet.Sdk.Extensions/bin/Release
      TESTING_EXTENSIONS_NUGET_BIN_FOLDER : ${{ github.workspace }}/DotNet.Sdk.Extensions.Testing/bin/Release
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Get release info run id
      id: release-info
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $statusesAsJson = gh api repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/statuses
        $statuses = $statusesAsJson | ConvertFrom-Json
        Write-Host $statuses
        $nugetReleaseInfoStatus = $statuses | Where-Object {$_.context -eq "NuGet release command handler / NuGet release info (repository_dispatch)"}
        $nugetReleaseInfoWorkflowUrl = $nugetReleaseInfoStatus.target_url
        $runId = $nugetReleaseInfoWorkflowUrl.Split("/")[-1]

        Write-Host "run-id=$runId"
        Write-Host "::set-output name=run-id::$runId"
    - name: Download NuGet release info artifact
      uses: dawidd6/action-download-artifact@v2.17.0
      with:
        workflow: nuget-release-command-handler.yml
        name:  nuget-release-info
        run_id: ${{ steps.release-info.outputs.run-id }}
    - name: Download NuGet release notes artifact
      id: download-release-notes
      continue-on-error: true
      uses: dawidd6/action-download-artifact@v2.17.0
      with:
        workflow: nuget-release-command-handler.yml
        name:  nuget-release-notes
        run_id: ${{ steps.release-info.outputs.run-id }}
    - name: Download NuGet artifact
      uses: dawidd6/action-download-artifact@v2.17.0
      with:
        workflow: build-test-package.yml
        name:  nuget-packages-and-symbols
        pr: ${{ github.event.pull_request.number }}
    - name: Prepare NuGet release info
      id: nuget-release-info
      run: |
        $nugetInfoPath = "./nuget-release-info.md"
        $nugetInfoJson = Get-Content $nugetInfoPath
        $nugetInfo = $nugetInfoJson | ConvertFrom-Json

        $nugetId = $nugetInfo.nugetId
        $nugetVersion = $nugetInfo.nugetVersion
        $nugetUrl = $nugetInfo.nugetUrl
        $autoGenerateReleaseNotes = $nugetInfo.autoGenerateReleaseNotes
        $issueNumber = $nugetInfo.issueNumber

        if($nugetId -eq "dotnet-sdk-extensions") {
          $nugetArtifacts = "${{ env.EXTENSIONS_NUGET_BIN_FOLDER }}/*.nupkg,${{ env.EXTENSIONS_NUGET_BIN_FOLDER }}/*.snupkg"
          $nugetExtensionsRelease = $true
          $nugetExtensionsTestingRelease = $false
        }
        elseif($nugetId -eq "dotnet-sdk-extensions-testing") {
          $nugetArtifacts = "${{ env.TESTING_EXTENSIONS_NUGET_BIN_FOLDER }}/*.nupkg,${{ env.TESTING_EXTENSIONS_NUGET_BIN_FOLDER }}/*.snupkg"
          $nugetExtensionsRelease = $false
          $nugetExtensionsTestingRelease = $true
        }

        $releaseNotesFile = "./nuget-release-notes.md"

        Write-Host "::set-output name=nuget-id::$nugetId"
        Write-Host "::set-output name=nuget-version::$nugetVersion"
        Write-Host "::set-output name=nuget-url::$nugetUrl"
        Write-Host "::set-output name=auto-generate-release-notes::$autoGenerateReleaseNotes"
        Write-Host "::set-output name=nuget-artifacts::$nugetArtifacts"
        Write-Host "::set-output name=nuget-release-notes-file-path::$releaseNotesFile"
        Write-Host "::set-output name=nuget-extensions-release::$nugetExtensionsRelease"
        Write-Host "::set-output name=nuget-extensions-testing-release::$nugetExtensionsTestingRelease"
        Write-Host "::set-output name=issue-number::$issueNumber"
    - name: Create release
      id: create-gh-release
      uses: ncipollo/release-action@v1
      with:
        commit: ${{ github.event.pull_request.merge_commit_sha }}
        tag: ${{ steps.nuget-release-info.outputs.nuget-id }}-${{ steps.nuget-release-info.outputs.nuget-version }}
        artifacts: "${{ steps.nuget-release-info.outputs.nuget-artifacts }}"
        bodyFile: ${{ steps.nuget-release-info.outputs.nuget-release-notes-file-path }}
        generateReleaseNotes: ${{ steps.nuget-release-info.outputs.auto-generate-release-notes }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish dotnet-sdk-extensions nuget and symbols
      id: dotnet-sdk-extensions-nuget-push
      if: steps.nuget-release-info.outputs.nuget-extensions-release == 'true'
      uses: ./.github/actions/nuget-push
      with:
        api-key: ${{ secrets.NUGET_PUSH_API_KEY }}
        source: https://api.nuget.org/v3/index.json
        working-directory: ${{ env.EXTENSIONS_NUGET_BIN_FOLDER }}
    - name: Log dotnet-sdk-extensions NuGet push info
      if: (steps.dotnet-sdk-extensions-nuget-push.conclusion == 'success' || steps.dotnet-sdk-extensions-nuget-push.conclusion == 'failure') && always()
      run: |
        $pushStepConclusion = '${{ steps.dotnet-sdk-extensions-nuget-push.conclusion }}'
        $nugetAlreadyExists = [System.Convert]::ToBoolean("${{ steps.dotnet-sdk-extensions-nuget-push.outputs.nuget-already-exists }}")
        if($nugetAlreadyExists) {
          Write-Host "::notice title=dotnet-sdk-extensions NuGet::dotnet-sdk-extensions NuGet was NOT published to nuget.org because the version to be pushed already exists."
        }
        elseif($pushStepConclusion -eq 'failure') {
          Write-Host "::error title=dotnet-sdk-extensions NuGet::Failed to push dotnet-sdk-extensions NuGet and symbols."
        }
        elseif($pushStepConclusion -eq 'success') {
          Write-Host "::notice title=dotnet-sdk-extensions NuGet::Successfully pushed dotnet-sdk-extensions NuGet and symbols to nuget.org. You can find the package at: https://www.nuget.org/packages/DotNet-Sdk-Extensions."
        }
    - name: Publish dotnet-sdk-extensions-testing nuget and symbols
      id: dotnet-sdk-extensions-testing-nuget-push
      if: steps.nuget-release-info.outputs.nuget-extensions-testing-release == 'true'
      uses: ./.github/actions/nuget-push
      with:
        api-key: ${{ secrets.NUGET_PUSH_API_KEY }}
        source: https://api.nuget.org/v3/index.json
        working-directory: ${{ env.TESTING_EXTENSIONS_NUGET_BIN_FOLDER }}
    - name: Log dotnet-sdk-extensions-testing NuGet push info
      if: (steps.dotnet-sdk-extensions-testing-nuget-push.conclusion == 'success' || steps.dotnet-sdk-extensions-testing-nuget-push.conclusion == 'failure') && always()
      run: |
        $pushStepConclusion = '${{ steps.dotnet-sdk-extensions-testing-nuget-push.conclusion }}'
        $nugetAlreadyExists = [System.Convert]::ToBoolean("${{ steps.dotnet-sdk-extensions-testing-nuget-push.outputs.nuget-already-exists }}")
        if($nugetAlreadyExists) {
          Write-Host "::notice title=dotnet-sdk-extensions-testing NuGet::dotnet-sdk-extensions-testing NuGet was NOT published to nuget.org because the version to be pushed already exists."
        }
        elseif($pushStepConclusion -eq 'failure') {
          Write-Host "::error title=dotnet-sdk-extensions-testing NuGet::Failed to push dotnet-sdk-extensions-testing NuGet and symbols."
        }
        elseif($pushStepConclusion -eq 'success') {
          Write-Host "::notice title=dotnet-sdk-extensions-testing NuGet::Successfully pushed dotnet-sdk-extensions-testing NuGet and symbols to nuget.org. You can find the package at: https://www.nuget.org/packages/DotNet-Sdk-Extensions-Testing."
        }
    - name: Render close issue comment template
      id: render-issue-comment-template
      uses: chuhlomin/render-template@v1.4
      with:
        template: .github/workflows/templates/nuget-publish/close-nuget-release-issue.md
        vars: |
          nugetId: '${{ steps.nuget-release-info.outputs.nuget-id }}'
          nugetVersion: '${{ steps.nuget-release-info.outputs.nuget-version }}'
          nugetUrl: '${{ steps.nuget-release-info.outputs.nuget-url }}'
          gitHubReleaseUrl: '${{ steps.create-gh-release.outputs.html_url }}'
    - name: Sanitize issue comment
      id: sanitize-issue-body
      run: |
        $body = "${{ steps.render-issue-comment-template.outputs.result }}"
        $body = $body -replace "`n","%0A" # The content must be escaped to preserve newlines. See https://github.community/t/set-output-truncates-multiline-strings/16852/3
        Write-Host "::set-output name=issue-comment::$body"
    - name: Add comment to NuGet release issue
      uses: peter-evans/create-or-update-comment@v1.4.5
      with:
        issue-number: ${{ steps.nuget-release-info.outputs.issue-number }}
        body: '${{ steps.sanitize-issue-body.outputs.issue-comment }}'
    - name: Close NuGet release issue
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh issue close ${{ steps.nuget-release-info.outputs.issue-number }}
