name: Publish NuGet packages

on:
  workflow_dispatch:
    inputs:
      nuget-package-workflow-run-id:
        description: 'NuGet package workflow run id: the run id of the workflow that contains the NuGet package artifact to publish. The action that creates the NuGet packages is named "Build, test and package"'
        required: true
      nuget-id:
        description: 'NuGet id: the id of the NuGet to publish.'
        required: true
      nuget-version:
        description: 'NuGet version: the version of the NuGet to publish.'
        required: true
      generate-github-release-notes:
        description: 'Generate GitHub release notes: set to "true" to auto generate release notes, set to "false" otherwise.'
        required: true
  pull_request:
    branches: [ main ]
    types: [ closed ]

defaults:
  run:
    shell: pwsh

jobs:
  workflow-args:
    name: Setup NuGet publish on PR trigger
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'nuget-release'))
    environment: nuget-publish-workflow
    permissions:
      contents: read
    runs-on: ubuntu-latest
    env:
      CUSTOM_RELEASE_NOTES_FILEPATH: './nuget-release-notes.md'
      CUSTOM_RELEASE_NOTES_ARTIFACT_NAME: 'nuget-release-notes'
    outputs:
      nuget-id: ${{ steps.nuget-publish-info.outputs.nuget-id }}
      nuget-version: ${{ steps.nuget-publish-info.outputs.nuget-version }}
      auto-generate-release-notes: ${{ steps.nuget-publish-info.outputs.auto-generate-release-notes }}
      nuget-package-run-id: ${{ steps.nuget-publish-info.outputs.nuget-package-run-id }}
      custom-release-notes-artifact-name: ${{ env.CUSTOM_RELEASE_NOTES_ARTIFACT_NAME }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Get release info run id from PR
      id: release-info
      if: github.event_name == 'pull_request'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $statusesAsJson = gh api repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/statuses
        $statuses = $statusesAsJson | ConvertFrom-Json
        Write-Host $statuses
        $nugetReleaseInfoStatus = $statuses | Where-Object {$_.context -eq "NuGet release command handler / NuGet release info (repository_dispatch)"}
        $nugetReleaseInfoWorkflowUrl = $nugetReleaseInfoStatus.target_url
        $runId = $nugetReleaseInfoWorkflowUrl.Split("/")[-1]
        Write-Host "run-id=$runId"
        Write-Host "::set-output name=run-id::$runId"
    - name: Download NuGet release info artifact from PR
      uses: dawidd6/action-download-artifact@v2.17.0
      if: github.event_name == 'pull_request'
      with:
        workflow: nuget-release-command-handler.yml
        name:  nuget-release-info
        run_id: ${{ steps.release-info.outputs.run-id }}
    - name: Download NuGet release notes artifact from PR
      id: download-release-notes
      if: github.event_name == 'pull_request'
      uses: dawidd6/action-download-artifact@v2.17.0
      with:
        workflow: nuget-release-command-handler.yml
        name:  ${{ env.CUSTOM_RELEASE_NOTES_ARTIFACT_NAME }}
        run_id: ${{ steps.release-info.outputs.run-id }}
    - name: Prepare NuGet publish info
      id: nuget-publish-info
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $isPullRequest = "${{ github.event_name }}" -eq "pull_request"
        if($isPullRequest) {
          $nugetInfoPath = './nuget-release-info.md'
          $nugetInfoJson = Get-Content $nugetInfoPath
          $nugetInfo = $nugetInfoJson | ConvertFrom-Json
          $nugetId = $nugetInfo.nugetId
          $nugetVersion = $nugetInfo.nugetVersion
          $autoGenerateReleaseNotes = $nugetInfo.autoGenerateReleaseNotes

          # get the workflow run id that was executed for the PR
          $prBranch =  '${{ github.event.pull_request.head.ref }}'
          $workflowId = 'build-test-package.yml'
          $workflowRuns = gh api repos/${{ github.repository }}/actions/workflows/$workflowId/runs?event=pull_request`&branch=$prBranch
          $prHeadSha = '${{ github.event.pull_request.head.sha }}'
          $nugetPackageRunId = $workflowRuns.workflow_runs.where{$_.head_sha -eq $prHeadSha}.id
        }
        else { # on workflow_dispatch event
          $nugetId = '${{ github.event.inputs.nuget-id }}'
          $nugetVersion = '${{ github.event.inputs.nuget-version }}'
          $autoGenerateReleaseNotes = '${{ github.event.inputs.generate-github-release-notes }}'
          $nugetPackageRunId = '${{ github.event.inputs.nuget-package-workflow-run-id }}'

          # create empty custom release notes
          New-Item -Name ${{ env.CUSTOM_RELEASE_NOTES_FILEPATH }} -ItemType File
        }

        Write-Host "::set-output name=nuget-id::$nugetId"
        Write-Host "::set-output name=nuget-version::$nugetVersion"
        Write-Host "::set-output name=auto-generate-release-notes::$autoGenerateReleaseNotes"
        Write-Host "::set-output name=nuget-package-run-id::$nugetPackageRunId"
    - name: Upload custom release notes
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.CUSTOM_RELEASE_NOTES_ARTIFACT_NAME }}
        path: ${{ env.CUSTOM_RELEASE_NOTES_FILEPATH }}

  publish-nuget:
    name: Publish NuGet package and symbols
    needs: [workflow-args]
    environment: nuget-publish-workflow
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      github-release-url: ${{ steps.create-gh-release.outputs.html_url }} # TODO
    env:
      EXTENSIONS_NUGET_BIN_FOLDER : ${{ github.workspace }}/DotNet.Sdk.Extensions/bin/Release
      TESTING_EXTENSIONS_NUGET_BIN_FOLDER : ${{ github.workspace }}/DotNet.Sdk.Extensions.Testing/bin/Release
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Download NuGet package artifact
      uses: dawidd6/action-download-artifact@v2.17.0
      with:
        workflow: build-test-package.yml
        name:  nuget-packages-and-symbols
        run_id: ${{ needs.workflow-args.outputs.nuget-package-run-id }}
    - name: Download custom release notes artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.workflow-args.outputs.custom-release-notes-artifact-name }}
    - name: Prepare NuGet publish info
      id: nuget-publish-info
      run: |
        $releaseNotesFile = './nuget-release-notes.md'
        $nugetId = '${{ needs.workflow-args.outputs.nuget-id }}'

        if($nugetId -eq 'dotnet-sdk-extensions') {
          $nugetArtifacts = '${{ env.EXTENSIONS_NUGET_BIN_FOLDER }}/*.nupkg,${{ env.EXTENSIONS_NUGET_BIN_FOLDER }}/*.snupkg'
          $nugetPushWorkingDir = '${{ env.EXTENSIONS_NUGET_BIN_FOLDER }}'
        }
        elseif($nugetId -eq "dotnet-sdk-extensions-testing") {
          $nugetArtifacts = '${{ env.TESTING_EXTENSIONS_NUGET_BIN_FOLDER }}/*.nupkg,${{ env.TESTING_EXTENSIONS_NUGET_BIN_FOLDER }}/*.snupkg'
          $nugetPushWorkingDir = '${{ env.TESTING_EXTENSIONS_NUGET_BIN_FOLDER }}'
        }

        Write-Host "::set-output name=nuget-release-notes-file-path::$releaseNotesFile"
        Write-Host "::set-output name=nuget-gh-release-artifacts::$nugetArtifacts"
        Write-Host "::set-output name=nuget-push-working-dir::$nugetPushWorkingDir"
    - name: Create GitHub release
      id: create-gh-release
      uses: ncipollo/release-action@v1
      with:
        commit: ${{ github.event.pull_request.merge_commit_sha }}
        tag: ${{ needs.workflow-args.outputs.nuget-id }}-${{ needs.workflow-args.outputs.nuget-version }}
        artifacts: '${{ steps.nuget-publish-info.outputs.nuget-gh-release-artifacts }}'
        bodyFile: ${{ steps.nuget-publish-info.outputs.nuget-release-notes-file-path }}
        generateReleaseNotes: ${{ needs.workflow-args.outputs.auto-generate-release-notes }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish NuGet and symbols
      id: nuget-push
      uses: ./.github/actions/nuget-push
      with:
        api-key: ${{ secrets.NUGET_PUSH_API_KEY }}
        source: https://api.nuget.org/v3/index.json
        working-directory: '${{ steps.nuget-publish-info.outputs.nuget-push-working-dir }}'
    - name: Log NuGet push info
      if: always()
      run: |
        $nugetId = '${{ needs.workflow-args.outputs.nuget-id }}'
        $nugetUrl = "https://www.nuget.org/packages/$nugetId"
        $pushStepConclusion = '${{ steps.nuget-push.conclusion }}'
        $nugetAlreadyExists = [System.Convert]::ToBoolean("${{ steps.nuget-push.outputs.nuget-already-exists }}")
        if($nugetAlreadyExists) {
          Write-Host "::notice title=$nugetId NuGet::$nugetId NuGet was NOT published to nuget.org because the version to be pushed already exists."
        }
        elseif($pushStepConclusion -eq 'failure') {
          Write-Host "::error title=$nugetIdNuGet::Failed to push $nugetId NuGet and symbols."
        }
        elseif($pushStepConclusion -eq 'success') {
          Write-Host "::notice title=$nugetId NuGet::Successfully pushed $nugetId NuGet and symbols to nuget.org. You can find the package at: $nugetUrl."
        }

  # trigger-nuget-release-flow:
  #   name: Trigger NuGet release flow
  #   needs: [release-info, publish-nuget]
  #   if: always() && needs.publish-nuget.result != 'skipped'
  #   environment: nuget-publish-workflow
  #   permissions:
  #     contents: read
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v3
  #   - name: Set NuGet release flow info
  #     id: set-nuget-release-flow-info
  #     run: |
  #       $workflowResult = '${{ needs.publish-nuget.result }}'
  #       if($workflowResult -eq 'success') {
  #         $workflowStatus = "ok"
  #         $releaseStatus = "completed"
  #         $releaseBadgeColor = "green"
  #       }
  #       else {
  #         $workflowStatus = "error"
  #         $releaseStatus = "failed"
  #         $releaseBadgeColor = "red"
  #       }

  #       Write-Host "::set-output name=issue-number::${{ github.event.client_payload.issueNumber }}"
  #       Write-Host "::set-output name=nuget-release-status::$releaseStatus"
  #       Write-Host "::set-output name=nuget-release-badge-color::$releaseBadgeColor"
  #       Write-Host "::set-output name=publish-nuget-node-status::$workflowStatus"
  #       Write-Host "::set-output name=publish-nuget-url::https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  #   - name: Trigger NuGet release flow action
  #     uses: ./.github/actions/trigger-nuget-release-flow
  #     with:
  #       repo-dispatch-token: ${{ secrets.REPOSITORY_DISPATCH_GH_TOKEN }}
  #       issue-number: '${{ needs.release-info.outputs.issue-number }}'
  #       nuget-release-status: '${{ steps.set-nuget-release-flow-info.outputs.nuget-release-status }}'
  #       nuget-release-badge-color: '${{ steps.set-nuget-release-flow-info.outputs.nuget-release-badge-color }}'
  #       publish-nuget-node-status: '${{ steps.set-nuget-release-flow-info.outputs.publish-nuget-node-status }}'
  #       publish-nuget-url: '${{ steps.set-nuget-release-flow-info.outputs.publish-nuget-url }}'


# close issue

#  - name: Render close issue comment template
#       id: render-issue-comment-template
#       uses: chuhlomin/render-template@v1.4
#       with:
#         template: .github/workflows/templates/nuget-publish/close-nuget-release-issue.md
#         vars: |
#           nugetId: '${{ steps.nuget-release-info.outputs.nuget-id }}'
#           nugetVersion: '${{ steps.nuget-release-info.outputs.nuget-version }}'
#           nugetUrl: '${{ steps.nuget-release-info.outputs.nuget-url }}'
#           gitHubReleaseUrl: '${{ steps.create-gh-release.outputs.html_url }}'
#     - name: Sanitize issue comment
#       id: sanitize-issue-body
#       run: |
#         $body = "${{ steps.render-issue-comment-template.outputs.result }}"
#         $body = $body -replace "`n","%0A" # The content must be escaped to preserve newlines. See https://github.community/t/set-output-truncates-multiline-strings/16852/3
#         Write-Host "::set-output name=issue-comment::$body"
#     - name: Add comment to NuGet release issue
#       uses: peter-evans/create-or-update-comment@v1.4.5
#       with:
#         issue-number: ${{ steps.nuget-release-info.outputs.issue-number }}
#         body: '${{ steps.sanitize-issue-body.outputs.issue-comment }}'
#     - name: Close NuGet release issue
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       run: |
#         gh issue close ${{ steps.nuget-release-info.outputs.issue-number }}
