# When making changes to this file please update the corresponding documentation which can be found at /docs/dev-notes/workflows/nuget-publish-workflow.md

name: Publish NuGet packages

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
    types: [ closed ]

defaults:
  run:
    shell: pwsh

jobs:
  on-dispatch:
    name: Publish NuGet packages and symbols
    if: github.event.pull_request.merged != true
    environment: nuget-push-workflow
    permissions:
      contents: read
    runs-on: ubuntu-latest
    env:
      EXTENSIONS_BIN_FOLDER : ${{ github.workspace }}/DotNet.Sdk.Extensions/bin/Release
      TESTING_EXTENSIONS_BIN_FOLDER : ${{ github.workspace }}/DotNet.Sdk.Extensions.Testing/bin/Release
      NUGET_ARTIFACT_NAME : nuget-packages-and-symbols
    steps:
    # Some of the steps below provide feedback on the test run and I want to run them even if some of the previous steps failed. For that
    # I need:
    # - the 'always()' condition: without it the step only runs if the job is successful, it's like the 'if' condition on any step always has a hidden '&& success()' clause.
    # - the '(steps.<step-id>.conclusion == 'success' || steps.<step-id>.conclusion == 'failure')' condition: to run the steps only if the <step-id> step has ran, regardless
    # if it failed or not. It won't run if the <step-id> step has been skipped or cancelled.
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Download NuGets artifact
      uses: dawidd6/action-download-artifact@v2.17.0
      with:
        workflow: build-test-package.yml
        name:  nuget-packages-and-symbols
        branch: main
        event: push
    - name: Publish DotNet.Sdk.Extensions nuget and symbols
      id: dotnet-sdk-extensions-nuget-push
      uses: ./.github/actions/nuget-push
      with:
        api-key: ${{ secrets.NUGET_PUSH_API_KEY }}
        source: https://api.nuget.org/v3/index.json
        working-directory: ${{ env.EXTENSIONS_BIN_FOLDER }}
    - name: Log DotNet.Sdk.Extensions NuGet push info
      if: (steps.dotnet-sdk-extensions-nuget-push.conclusion == 'success' || steps.dotnet-sdk-extensions-nuget-push.conclusion == 'failure') && always()
      run: |
        $pushStepConclusion = '${{ steps.dotnet-sdk-extensions-nuget-push.conclusion }}'
        $nugetAlreadyExists = [System.Convert]::ToBoolean("${{ steps.dotnet-sdk-extensions-nuget-push.outputs.nuget-already-exists }}")
        if($nugetAlreadyExists) {
          Write-Host "::notice title=DotNet.Sdk.Extensions NuGet::DotNet.Sdk.Extensions NuGet was NOT published to nuget.org because the version to be pushed already exists."
        }
        elseif($pushStepConclusion -eq 'failure') {
          Write-Host "::error title=DotNet.Sdk.Extensions NuGet::Failed to push DotNet.Sdk.Extensions NuGet and symbols."
        }
        elseif($pushStepConclusion -eq 'success') {
          Write-Host "::notice title=DotNet.Sdk.Extensions NuGet::Successfully pushed DotNet.Sdk.Extensions NuGet and symbols to nuget.org. You can find the package at: https://www.nuget.org/packages/DotNet-Sdk-Extensions."
        }
    - name: Publish DotNet.Sdk.Extensions.Testing nuget and symbols
      uses: ./.github/actions/nuget-push
      id: dotnet-sdk-extensions-testing-nuget-push
      with:
        api-key: ${{ secrets.NUGET_PUSH_API_KEY }}
        source: https://api.nuget.org/v3/index.json
        working-directory: ${{ env.TESTING_EXTENSIONS_BIN_FOLDER }}
    - name: Log DotNet.Sdk.Extensions.Testing NuGet push info
      if: (steps.dotnet-sdk-extensions-testing-nuget-push.conclusion == 'success' || steps.dotnet-sdk-extensions-testing-nuget-push.conclusion == 'failure') && always()
      run: |
        $pushStepConclusion = '${{ steps.dotnet-sdk-extensions-testing-nuget-push.conclusion }}'
        $nugetAlreadyExists = [System.Convert]::ToBoolean("${{ steps.dotnet-sdk-extensions-testing-nuget-push.outputs.nuget-already-exists }}")
        if($nugetAlreadyExists) {
          Write-Host "::notice title=DotNet.Sdk.Extensions.Testing NuGet::DotNet.Sdk.Extensions.Testing NuGet was NOT published to nuget.org because the version to be pushed already exists."
        }
        elseif($pushStepConclusion -eq 'failure') {
          Write-Host "::error title=DotNet.Sdk.Extensions.Testing NuGet::Failed to push DotNet.Sdk.Extensions.Testing NuGet and symbols."
        }
        elseif($pushStepConclusion -eq 'success') {
          Write-Host "::notice title=DotNet.Sdk.Extensions.Testing NuGet::Successfully pushed DotNet.Sdk.Extensions.Testing NuGet and symbols to nuget.org. You can find the package at: https://www.nuget.org/packages/DotNet-Sdk-Extensions-Testing."
        }

  on-pr-merge:
    name: Publish NuGet packages and symbols
    if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'nuget-release')
    environment: nuget-push-workflow
    permissions:
      contents: write
    runs-on: ubuntu-latest
    env:
      EXTENSIONS_BIN_FOLDER : ${{ github.workspace }}/DotNet.Sdk.Extensions/bin/Release
      TESTING_EXTENSIONS_BIN_FOLDER : ${{ github.workspace }}/DotNet.Sdk.Extensions.Testing/bin/Release
      NUGET_ARTIFACT_NAME : nuget-packages-and-symbols
    steps:
    # Some of the steps below provide feedback on the test run and I want to run them even if some of the previous steps failed. For that
    # I need:
    # - the 'always()' condition: without it the step only runs if the job is successful, it's like the 'if' condition on any step always has a hidden '&& success()' clause.
    # - the '(steps.<step-id>.conclusion == 'success' || steps.<step-id>.conclusion == 'failure')' condition: to run the steps only if the <step-id> step has ran, regardless
    # if it failed or not. It won't run if the <step-id> step has been skipped or cancelled.
    - name: Dump github context
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: $env:GITHUB_CONTEXT
    - name: Get release info status
      id: release-info
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $statusesAsJson = gh api repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/statuses
        $statuses = $statusesAsJson | ConvertFrom-Json
        Write-Host $statuses
        $nugetReleaseInfoStatus = $statuses | Where-Object {$_.context -eq "NuGet release command handler / NuGet release info (repository_dispatch)"}
        $nugetReleaseInfoWorkflowUrl = $nugetReleaseInfoStatus.target_url
        $runId = $nugetReleaseInfoWorkflowUrl.Split("/")[-1]

        Write-Host "run-id=$runId"
        Write-Host "::set-output name=run-id::$runId"
    - name: Download NuGet release info artifact
      uses: dawidd6/action-download-artifact@v2.17.0
      with:
        workflow: nuget-release-command-handler.yml
        name:  nuget-info
        run_id: ${{ steps.release-info.outputs.run-id }}
    - name: Download NuGet release notes artifact
      uses: dawidd6/action-download-artifact@v2.17.0
      with:
        workflow: nuget-release-command-handler.yml
        name:  nuget-release-notes
        run_id: ${{ steps.release-info.outputs.run-id }}
    - name: Download NuGet artifact
      uses: dawidd6/action-download-artifact@v2.17.0
      with:
        workflow: build-test-package.yml
        name:  nuget-packages-and-symbols
        pr: ${{ github.event.pull_request.number }}
    - name: Read NuGet release info
      id: nuget-release-info
      run: |
        $nugetInfoPath = "./nuget-info.md"
        $nugetInfoJson = Get-Content $nugetInfoPath
        $nugetInfo = $nugetInfoJson | ConvertFrom-Json

        $nugetId = $nugetInfo.nugetId
        $nugetVersion = $nugetInfo.nugetVersion
        $nugetUrl = $nugetInfo.nugetUrl
        if($nugetId -eq "dotnet-sdk-extensions") {
          $nugetArtifacts = "./DotNet.Sdk.Extensions/**/*.nupkg,DotNet.Sdk.Extensions/**/*.snupkg"
          # $nugetArtifacts = "./DotNet.Sdk.Extensions/bin/Release/*"
        }
        elseif($nugetId -eq "dotnet-sdk-extensions-testing") {
          $nugetArtifacts = "./DotNet.Sdk.Extensions.Testing/**/*.nupkg,DotNet.Sdk.Extensions.Testing/**/*.snupkg"
          # $nugetArtifacts = "./DotNet.Sdk.Extensions.Testing/bin/Release/*"
        }

        Write-Host "::set-output name=nuget-id::$nugetId"
        Write-Host "::set-output name=nuget-version::$nugetVersion"
        Write-Host "::set-output name=nuget-url::$nugetUrl"
        Write-Host "::set-output name=nuget-artifacts::$nugetArtifacts"


    - name: Debug
      run: |
        Write-Host "${{ steps.nuget-release-info.outputs.nuget-artifacts }}"
        ls -R

    - uses: ncipollo/release-action@v1
      with:
        commit: ${{ github.event.pull_request.merge_commit_sha }}
        tag: ${{ steps.nuget-release-info.outputs.nuget-id }}-${{ steps.nuget-release-info.outputs.nuget-version }}
        artifacts: "${{ steps.nuget-release-info.outputs.nuget-artifacts }}"
        bodyFile: ./nuget-release-notes.md
        # omitBody: true
        generateReleaseNotes: true
        token: ${{ secrets.GITHUB_TOKEN }}

    # - name: Checkout repository
    #   uses: actions/checkout@v2
    # - name: Download NuGets artifact
    #   uses: dawidd6/action-download-artifact@v2.17.0
    #   with:
    #     workflow: build-test-package.yml
    #     name:  nuget-packages-and-symbols
    #     branch: main
    #     event: push
    # - uses: ncipollo/release-action@v1
    #   with:
    #     commit: ${{ github.event.pull_request.merge_commit_sha }}
    #     tag:
    #     artifacts: "release.tar.gz,foo/*.txt"
    #     # bodyFile: "body.md"
    #     token: ${{ secrets.GITHUB_TOKEN }}

    # - name: Publish DotNet.Sdk.Extensions nuget and symbols
    #   id: dotnet-sdk-extensions-nuget-push
    #   uses: ./.github/actions/nuget-push
    #   with:
    #     api-key: ${{ secrets.NUGET_PUSH_API_KEY }}
    #     source: https://api.nuget.org/v3/index.json
    #     working-directory: ${{ env.EXTENSIONS_BIN_FOLDER }}
    # - name: Log DotNet.Sdk.Extensions NuGet push info
    #   if: (steps.dotnet-sdk-extensions-nuget-push.conclusion == 'success' || steps.dotnet-sdk-extensions-nuget-push.conclusion == 'failure') && always()
    #   run: |
    #     $pushStepConclusion = '${{ steps.dotnet-sdk-extensions-nuget-push.conclusion }}'
    #     $nugetAlreadyExists = [System.Convert]::ToBoolean("${{ steps.dotnet-sdk-extensions-nuget-push.outputs.nuget-already-exists }}")
    #     if($nugetAlreadyExists) {
    #       Write-Host "::notice title=DotNet.Sdk.Extensions NuGet::DotNet.Sdk.Extensions NuGet was NOT published to nuget.org because the version to be pushed already exists."
    #     }
    #     elseif($pushStepConclusion -eq 'failure') {
    #       Write-Host "::error title=DotNet.Sdk.Extensions NuGet::Failed to push DotNet.Sdk.Extensions NuGet and symbols."
    #     }
    #     elseif($pushStepConclusion -eq 'success') {
    #       Write-Host "::notice title=DotNet.Sdk.Extensions NuGet::Successfully pushed DotNet.Sdk.Extensions NuGet and symbols to nuget.org. You can find the package at: https://www.nuget.org/packages/DotNet-Sdk-Extensions."
    #     }
    # - name: Publish DotNet.Sdk.Extensions.Testing nuget and symbols
    #   uses: ./.github/actions/nuget-push
    #   id: dotnet-sdk-extensions-testing-nuget-push
    #   with:
    #     api-key: ${{ secrets.NUGET_PUSH_API_KEY }}
    #     source: https://api.nuget.org/v3/index.json
    #     working-directory: ${{ env.TESTING_EXTENSIONS_BIN_FOLDER }}
    # - name: Log DotNet.Sdk.Extensions.Testing NuGet push info
    #   if: (steps.dotnet-sdk-extensions-testing-nuget-push.conclusion == 'success' || steps.dotnet-sdk-extensions-testing-nuget-push.conclusion == 'failure') && always()
    #   run: |
    #     $pushStepConclusion = '${{ steps.dotnet-sdk-extensions-testing-nuget-push.conclusion }}'
    #     $nugetAlreadyExists = [System.Convert]::ToBoolean("${{ steps.dotnet-sdk-extensions-testing-nuget-push.outputs.nuget-already-exists }}")
    #     if($nugetAlreadyExists) {
    #       Write-Host "::notice title=DotNet.Sdk.Extensions.Testing NuGet::DotNet.Sdk.Extensions.Testing NuGet was NOT published to nuget.org because the version to be pushed already exists."
    #     }
    #     elseif($pushStepConclusion -eq 'failure') {
    #       Write-Host "::error title=DotNet.Sdk.Extensions.Testing NuGet::Failed to push DotNet.Sdk.Extensions.Testing NuGet and symbols."
    #     }
    #     elseif($pushStepConclusion -eq 'success') {
    #       Write-Host "::notice title=DotNet.Sdk.Extensions.Testing NuGet::Successfully pushed DotNet.Sdk.Extensions.Testing NuGet and symbols to nuget.org. You can find the package at: https://www.nuget.org/packages/DotNet-Sdk-Extensions-Testing."
    #     }


# on pr merged, list all status
# get run id from the build-test-package.yml workflow to download NuGet artifacts
# get run id from the nuget-release-command-handler.yml workflow to download the release notes
# get commit from ${{ github.event.pull_request.merge_commit_sha }}
# disable workflow_dispatch trigger ???

  # pull_request:
  #   branches: [ main ]
  #   types: [ closed ]


    # - name: Dump github context
    #   env:
    #     GITHUB_CONTEXT: ${{ toJSON(github) }}
    #   run: $env:GITHUB_CONTEXT

    # if: github.event.pull_request.merged == true

    # - uses: ncipollo/release-action@v1
    #   with:
    #     commit: ${{ github.event.pull_request.merge_commit_sha }}
    #     tag:
    #     artifacts: "release.tar.gz,foo/*.txt"
    #     # bodyFile: "body.md"
    #     token: ${{ secrets.GITHUB_TOKEN }}
    # - name: Trigger NuGet publish workflow
    #   uses: peter-evans/repository-dispatch@v1.1.3
    #   with:
    #     token: ${{ secrets.REPOSITORY_DISPATCH_GH_TOKEN }}
    #     repository: ${{ github.repository}}
    #     event-type: release-nuget-pr-merged
