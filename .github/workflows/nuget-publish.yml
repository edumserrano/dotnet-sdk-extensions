# When making changes to this file please update the corresponding documentation which can be found at /docs/dev-notes/workflows/nuget-publish-workflow.md

name: Publish Nuget packages

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths-ignore:
    - "**.md"
  pull_request:
    branches: [ main ]
    paths-ignore:
    - "**.md"
  schedule:
    - cron: '0 0 * * 0' # Once a week: "At 00:00 on Sunday."

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: pwsh

env:
  LATEST_DOTNET_VERSION : 6.0.101

jobs:
  build:
    name: Build and test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      SLN_FILEPATH : ${{github.workspace}}/DotNet.Sdk.Extensions.sln
      TEST_RESULTS_DIR : tests/${{ matrix.os }}/test-results
      TEST_COVERAGE_DIR : tests/${{ matrix.os }}/coverage-results
      TEST_COVERAGE_MERGE_FILE : tests/${{ matrix.os }}/coverage-results/coverage.net6.0.json
      TEST_COVERAGE_FILE : tests/${{ matrix.os }}/coverage-results/coverage.net6.0.opencover.xml
      TEST_COVERAGE_REPORT_DIR : tests/${{ matrix.os }}/coverage-results/report
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: |
          3.1.x
          5.0.x
          ${{ env.LATEST_DOTNET_VERSION }}
    - name: Cache/Restore NuGets
      uses: actions/cache@v2
      with:
        path:
          ~/.nuget/packages
        key: ${{ runner.os }}-nuget
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: Install reportgenerator dotnet tool
      run:  dotnet tool install --global dotnet-reportgenerator-globaltool
    - name: Restore dependencies
      run: dotnet restore ${{ env.SLN_FILEPATH }}
    - name: Build
      run: dotnet build ${{ env.SLN_FILEPATH }} -c Release -warnaserror --no-restore --no-incremental
    - name: Test and code coverage
      id: dotnet-test
      run: |
        $testResultsDir = $(Join-Path -Path (Get-Location) -ChildPath "${{ env.TEST_RESULTS_DIR }}")
        Write-Host "::set-output name=test-results-dir::$testResultsDir"
        dotnet test ${{ env.SLN_FILEPATH }} `
          -c Release `
          --no-build `
          --logger "trx;LogFilePrefix=framework" `
          --logger "html;LogFilePrefix=framework" `
          --logger GitHubActions `
          --logger "liquid.custom;Template=${{github.workspace}}/tests/liquid-test-logger-template.md;LogFilePrefix=framework" `
          --results-directory "$testResultsDir" `
          /p:CollectCoverage=true `
          /p:CoverletOutput="$(Join-Path -Path (Get-Location) -ChildPath "${{ env.TEST_COVERAGE_DIR }}/")" `
          /p:MergeWith="$(Join-Path -Path (Get-Location) -ChildPath "${{ env.TEST_COVERAGE_MERGE_FILE }}")" `
          /p:CoverletOutputFormat="json%2copencover" `
          -m:1
        exit -1
    # this job is on a matrix run but I only want to upload code coverage to Codecov once, so I've chose to run it on one of the matrix.os values.
    # furthermore, the steps below provide feedback on the test run so I want to run them even if job failed or if the dotnet-test step fails. For that
    # I need:
    # - the 'always()' condition: without it the step only runs if the job is successful, it's like the 'if' condition on any step always has a hidden '&& success()' clause
    # - the '(steps.dotnet-test.conclusion == 'success' || steps.dotnet-test.conclusion == 'failure')' condition: to run the steps only if the dotnet-test step has ran, regardless
    # if it failed or not. It won't run if the dotnet-test step has been skipped or cancelled. In this case, there's no point in trying to run the steps below
    # because there won't be any data from the test run.
    - name: Upload test coverage to Codecov
      uses: codecov/codecov-action@v2.1.0
      if: matrix.os == 'ubuntu-latest' && (steps.dotnet-test.conclusion == 'success' || steps.dotnet-test.conclusion == 'failure') && always()
      with:
        files: ${{ env.TEST_COVERAGE_FILE }}
        fail_ci_if_error: true
    - name: Generate code coverage report
      if: steps.dotnet-test.conclusion == 'success' || steps.dotnet-test.conclusion == 'failure' && always()
      run: |
        reportgenerator `
          "-reports:${{ env.TEST_COVERAGE_FILE }}" `
          "-targetdir:${{ env.TEST_COVERAGE_REPORT_DIR }}" `
          -reportTypes:htmlInline
    - name: Upload code coverage report to artifacts
      if: steps.dotnet-test.conclusion == 'success' || steps.dotnet-test.conclusion == 'failure' && always()
      uses: actions/upload-artifact@v2
      with:
        name: code-coverage-report-${{ matrix.os }}
        path: ${{ env.TEST_COVERAGE_REPORT_DIR }}
    - name: Upload test-results to artifacts
      if: steps.dotnet-test.conclusion == 'success' || steps.dotnet-test.conclusion == 'failure' && always()
      uses: actions/upload-artifact@v2
      with:
        name: test-results-${{ matrix.os }}
        path: ${{ steps.dotnet-test.outputs.test-results-dir }}
    # - name: GitHub test report
    #   uses: dorny/test-reporter@v1
    #   if: matrix.os == 'ubuntu-latest' && github.event_name != 'pull_request' && always()
    #   with:
    #     name: dotnet test results
    #     path: ${{ env.TEST_RESULTS_DIR }}/*.trx
    #     reporter: dotnet-trx
    #     max-annotations: 50

  nuget-publish:
    name: Publish NuGet packages and symbols
    needs: [build]
    runs-on: ubuntu-latest
    env:
      EXTENSIONS_CSPROJ_FILEPATH : ${{ github.workspace }}/src/DotNet.Sdk.Extensions/DotNet.Sdk.Extensions.csproj
      TESTING_EXTENSIONS_CSPROJ_FILEPATH : ${{ github.workspace }}/src/DotNet.Sdk.Extensions.Testing/DotNet.Sdk.Extensions.Testing.csproj
      EXTENSIONS_BIN_FOLDER : ${{ github.workspace }}/src/DotNet.Sdk.Extensions/bin/Release
      TESTING_EXTENSIONS_BIN_FOLDER : ${{ github.workspace }}/src/DotNet.Sdk.Extensions.Testing/bin/Release
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.LATEST_DOTNET_VERSION }}
    - name: Cache/Restore NuGets
      uses: actions/cache@v2
      with:
        path:
          ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ env.LATEST_DOTNET_VERSION }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    - name: Package DotNet.Sdk.Extensions
      run: dotnet pack ${{ env.EXTENSIONS_CSPROJ_FILEPATH }} -c Release
    - name: Package DotNet.Sdk.Extensions.Testing
      run: dotnet pack ${{ env.TESTING_EXTENSIONS_CSPROJ_FILEPATH }} -c Release
    - name: Publish DotNet.Sdk.Extensions nuget and symbols
      uses: ./.github/actions/nuget-push
      if: github.event_name != 'pull_request' # don't push nugets on pull requests
      with:
        api-key: ${{ secrets.NUGET_PUSH_API_KEY }}
        source: https://api.nuget.org/v3/index.json
        working-directory: ${{ env.EXTENSIONS_BIN_FOLDER }}
    - name: Publish DotNet.Sdk.Extensions.Testing nuget and symbols
      uses: ./.github/actions/nuget-push
      if: github.event_name != 'pull_request' # don't push nugets on pull requests
      with:
        api-key: ${{ secrets.NUGET_PUSH_API_KEY }}
        source: https://api.nuget.org/v3/index.json
        working-directory: ${{ env.TESTING_EXTENSIONS_BIN_FOLDER }}
    - name: Upload nugets and symbols to artifacts
      uses: actions/upload-artifact@v2
      with:
        name: nuget-packages-and-symbols
        path: |
          ${{ env.EXTENSIONS_BIN_FOLDER }}/*.nupkg
          ${{ env.EXTENSIONS_BIN_FOLDER }}/*.snupkg
          ${{ env.TESTING_EXTENSIONS_BIN_FOLDER }}/*.nupkg
          ${{ env.TESTING_EXTENSIONS_BIN_FOLDER }}/*.snupkg
