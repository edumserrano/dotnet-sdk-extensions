name: Issue - NuGet release flow

on:
  repository_dispatch:
    types: [ nuget-release-flow-command ]

defaults:
  run:
    shell: pwsh

jobs:
  main:
    name: Update NuGet release flow
    environment: no-secrets-workflow
    permissions:
      contents: read
      issues: write
    runs-on: ubuntu-latest
    steps:
    - name: Dump github context
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: $env:GITHUB_CONTEXT
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Find NuGet release flow comment
      uses: peter-evans/find-comment@v1.3.0
      id: find-nuget-release-flow-comment
      with:
        issue-number: '${{ github.event.client_payload.nuget.issueNumber }}'
        body-includes: '<!-- nuget-release-flow -->'
        comment-author: github-actions[bot]
    - name: Parse data from NuGet flow comment
      id: parse-nuget-flow-data
      if: steps.find-nuget-release-flow-comment.outputs.comment-id != 0
      run: |
        $commentBody = '${{ steps.find-nuget-release-flow-comment.outputs.comment-body }}'

        $commentBody -match '<!-- nuget-id: (?<NugetId>.+) -->'
        $nugetId = $Matches.NugetId

        $commentBody -match '<!-- nuget-version: (?<NugetVersion>.+) -->'
        $nugetVersion = $Matches.NugetVersion

        $commentBody -match '<!-- issue-nuget-release-node-status: (?<IssueNugetReleaseNodeStatus>.+) -->'
        $issueNugetReleaseNodeStatus = $Matches.IssueNugetReleaseNodeStatus

        $commentBody -match '<!-- issue-nuget-release-url: (?<IssueNugetReleaseUrl>.+) -->'
        $issueNugetReleaseUrl = $Matches.IssueNugetReleaseUrl

        $commentBody -match '<!-- nuget-release-command-handler-node-status: (?<NugetReleaseCommandHandlerNodeStatus>.+) -->'
        $nugetReleaseCommandHandlerNodeStatus = $Matches.NugetReleaseCommandHandlerNodeStatus

        $commentBody -match '<!-- nuget-release-command-handler-url: (?<NugetReleaseCommandHandlerUrl>.+) -->'
        $nugetReleaseCommandHandlerUrl = $Matches.NugetReleaseCommandHandlerUrl

        $commentBody -match '<!-- nuget-release-pull-request-node-status: (?<NugetReleasePullRequestNodeStatus>.+) -->'
        $nugetReleasePullRequestNodeStatus = $Matches.NugetReleasePullRequestNodeStatus

        $commentBody -match '<!-- nuget-release-pull-request-url: (?<NugetReleasePullRequestUrl>.+) -->'
        $nugetReleasePullRequestUrl = $Matches.NugetReleasePullRequestUrl

        Write-Host "::set-output name=issue-nuget-id::$nugetId"
        Write-Host "::set-output name=issue-nuget-version::$nugetVersion"
        Write-Host "::set-output name=issue-nuget-release-node-status::$issueNugetReleaseNodeStatus"
        Write-Host "::set-output name=issue-nuget-release-url::$issueNugetReleaseUrl"
        Write-Host "::set-output name=nuget-release-command-handler-node-status::$nugetReleaseCommandHandlerNodeStatus"
        Write-Host "::set-output name=nuget-release-command-handler-url::$nugetReleaseCommandHandlerUrl"
        Write-Host "::set-output name=nuget-release-pull-request-node-status::$nugetReleasePullRequestNodeStatus"
        Write-Host "::set-output name=nuget-release-pull-request-url::$nugetReleasePullRequestUrl"
    - name: Read nuget release flow info
      id: nuget-release-flow-info
      run: |
        # the value is defined in the following order:
        # 1 - if it exists in the client payload from the repo dispatch event
        # 2 - if it exists in the parsed data from the nuget release flow comment
        # 3 - use a default value
        $issueNugetReleaseNodeStatus = 'default'
        $issueNugetReleaseUrl = 'empty'
        $nugetReleaseCommandHandlerNodeStatus = 'default'
        $nugetReleaseCommandHandlerUrl = 'empty'
        $nugetReleasePullRequestNodeStatus = 'default'
        $nugetReleasePullRequestUrl = 'empty'
        $publishNugetNodeStatus = 'default'
        $publishNugetUrl = 'empty'

        $issueNugetReleaseNodeStatus = [string]::IsNullOrWhiteSpace('${{ steps.parse-nuget-flow-data.outputs.issue-nuget-release-node-status }}') `
          ? $issueNugetReleaseNodeStatus `
          : '${{ steps.parse-nuget-flow-data.outputs.issue-nuget-release-node-status }}'
        $issueNugetReleaseUrl = [string]::IsNullOrWhiteSpace('${{ steps.parse-node-urls.outputs.issue-nuget-release-url }}') `
          ? $issueNugetReleaseUrl `
          : '${{ steps.parse-node-urls.outputs.issue-nuget-release-url }}'
        $nugetReleaseCommandHandlerNodeStatus = [string]::IsNullOrWhiteSpace('${{ steps.parse-nuget-flow-data.outputs.nuget-release-command-handler-node-status }}') `
          ? $nugetReleaseCommandHandlerNodeStatus `
          : '${{ steps.parse-nuget-flow-data.outputs.nuget-release-command-handler-node-status }}'
        $nugetReleaseCommandHandlerUrl = [string]::IsNullOrWhiteSpace('${{ steps.parse-node-urls.outputs.nuget-release-command-handler-url }}') `
          ? $nugetReleaseCommandHandlerUrl `
          : '${{ steps.parse-node-urls.outputs.nuget-release-command-handler-url }}'
        $nugetReleasePullRequestNodeStatus = [string]::IsNullOrWhiteSpace('${{ steps.parse-nuget-flow-data.outputs.nuget-release-pull-request-node-status }}') `
          ? $nugetReleasePullRequestNodeStatus `
          : '${{ steps.parse-nuget-flow-data.outputs.nuget-release-pull-request-node-status }}'
        $nugetReleasePullRequestUrl = [string]::IsNullOrWhiteSpace('${{ steps.parse-node-urls.outputs.nuget-release-pull-request-url }}') `
          ? $nugetReleasePullRequestUrl `
          : '${{ steps.parse-node-urls.outputs.nuget-release-pull-request-url }}'

        $issueNugetReleaseNodeStatus = [string]::IsNullOrWhiteSpace('${{ github.event.client_payload.nuget.issueNugetReleaseNodeStatus }}') `
          ? $issueNugetReleaseNodeStatus `
          : '${{ github.event.client_payload.nuget.issueNugetReleaseNodeStatus }}'
        $issueNugetReleaseUrl = [string]::IsNullOrWhiteSpace('${{ github.event.client_payload.nuget.issueNugetReleaseUrl }}') `
          ? $issueNugetReleaseUrl `
          : '${{ github.event.client_payload.nuget.issueNugetReleaseUrl }}'
        $nugetReleaseCommandHandlerNodeStatus = [string]::IsNullOrWhiteSpace('${{ github.event.client_payload.nuget.nugetReleaseCommandHandlerNodeStatus }}') `
          ? $nugetReleaseCommandHandlerNodeStatus `
          : '${{ github.event.client_payload.nuget.nugetReleaseCommandHandlerNodeStatus }}'
        $nugetReleaseCommandHandlerUrl = [string]::IsNullOrWhiteSpace('${{ github.event.client_payload.nuget.nugetReleaseCommandHandlerUrl }}') `
          ? $nugetReleaseCommandHandlerUrl `
          : '${{ github.event.client_payload.nuget.nugetReleaseCommandHandlerUrl }}'
        $nugetReleasePullRequestNodeStatus = [string]::IsNullOrWhiteSpace('${{ github.event.client_payload.nuget.nugetReleasePullRequestNodeStatus }}') `
          ? $nugetReleasePullRequestNodeStatus `
          : '${{ github.event.client_payload.nuget.nugetReleasePullRequestNodeStatus }}'
        $nugetReleasePullRequestUrl = [string]::IsNullOrWhiteSpace('${{ github.event.client_payload.nuget.nugetReleasePullRequestUrl }}') `
          ? $nugetReleasePullRequestUrl `
          : '${{ github.event.client_payload.nuget.nugetReleasePullRequestUrl }}'
        $publishNugetNodeStatus = [string]::IsNullOrWhiteSpace('${{ github.event.client_payload.nuget.publishNugetNodeStatus }}') `
          ? $publishNugetNodeStatus `
          : '${{ github.event.client_payload.nuget.publishNugetNodeStatus }}'
        $publishNugetUrl = [string]::IsNullOrWhiteSpace('${{ github.event.client_payload.nuget.publishNugetUrl }}') `
          ? $publishNugetUrl `
          : '${{ github.event.client_payload.nuget.publishNugetUrl }}'

        # there's no default for nuget id and nuget version, they need to be passed in the first time and then
        # their value is read from the nuget release flow comment
        $nugetId = [string]::IsNullOrWhiteSpace('${{ steps.parse-nuget-flow-data.outputs.nuget-id }}') `
          ? '${{ github.event.client_payload.nuget.nugetId }}' `
          : '${{ steps.parse-nuget-flow-data.outputs.nuget-id }}'
        $nugetVersion = [string]::IsNullOrWhiteSpace('${{ steps.parse-nuget-flow-data.outputs.nuget-version }}') `
          ? '${{ github.event.client_payload.nuget.nugetVersion }}' `
          : '${{ steps.parse-nuget-flow-data.outputs.nuget-version }}'

        Write-Host "::set-output name=nuget-id::$nugetId"
        Write-Host "::set-output name=nuget-version::$nugetVersion"
        Write-Host "::set-output name=nuget-release-status::${{ github.event.client_payload.nuget.nugetReleaseStatus }}"
        Write-Host "::set-output name=nuget-release-badge-color::${{ github.event.client_payload.nuget.nugetReleaseBadgeColor }}"
        Write-Host "::set-output name=issue-nuget-release-node-status::$issueNugetReleaseNodeStatus"
        Write-Host "::set-output name=issue-nuget-release-url::$issueNugetReleaseUrl"
        Write-Host "::set-output name=nuget-release-command-handler-node-status::$nugetReleaseCommandHandlerNodeStatus"
        Write-Host "::set-output name=nuget-release-command-handler-url::$nugetReleaseCommandHandlerUrl"
        Write-Host "::set-output name=nuget-release-pull-request-node-status::$nugetReleasePullRequestNodeStatus"
        Write-Host "::set-output name=nuget-release-pull-request-url::$nugetReleasePullRequestUrl"
        Write-Host "::set-output name=publish-nuget-node-status::$publishNugetNodeStatus"
        Write-Host "::set-output name=publish-nuget-url::$publishNugetUrl"
    - name: Dump output from previous step
      env:
        STEP_OUTPUT: ${{ toJSON(steps.nuget-release-flow-info.outputs) }}
      run: $env:STEP_OUTPUT
    - name: Render issue comment template
      id: render-issue-comment-template
      uses: chuhlomin/render-template@v1.4
      with:
        template: .github/workflows/templates/issue-nuget-release-flow/nuget-release-flow-issue-comment.md
        vars: |
          nugetId: '${{ steps.nuget-release-flow-info.outputs.nuget-id }}'
          nugetVersion: '${{ steps.nuget-release-flow-info.outputs.nuget-version }}'
          nugetReleaseStatus: '${{ steps.nuget-release-flow-info.outputs.nuget-release-status }}'
          nugetReleaseBadgeColor: '${{ steps.nuget-release-flow-info.outputs.nuget-release-badge-color }}'
          issueNugetReleaseNodeStatus: '${{ steps.nuget-release-flow-info.outputs.issue-nuget-release-node-status }}'
          issueNugetReleaseUrl: '${{ steps.nuget-release-flow-info.outputs.issue-nuget-release-url }}'
          nugetReleaseCommandHandlerNodeStatus: '${{ steps.nuget-release-flow-info.outputs.nuget-release-command-handler-node-status }}'
          nugetReleaseCommandHandlerUrl: '${{ steps.nuget-release-flow-info.outputs.nuget-release-command-handler-url }}'
          nugetReleasePullRequestNodeStatus: '${{ steps.nuget-release-flow-info.outputs.nuget-release-pull-request-node-status }}'
          nugetReleasePullRequestUrl: '${{ steps.nuget-release-flow-info.outputs.nuget-release-pull-request-url }}'
          publishNugetNodeStatus: '${{ steps.nuget-release-flow-info.outputs.publish-nuGet-node-status }}'
          publishNugetUrl: '${{ steps.nuget-release-flow-info.outputs.publish-nuGet-url }}'
    - name: Sanitize issue comment
      id: sanitize-issue-comment
      run: |
        $body = '${{ steps.render-issue-comment-template.outputs.result }}'
        $body = $body -replace "`n","%0A" # The content must be escaped to preserve newlines. See https://github.community/t/set-output-truncates-multiline-strings/16852/3
        Write-Host "::set-output name=body::$body"
    - name: Update issue with NuGet flow comment
      uses: ./.github/actions/create-update-comment
      with:
        issue-number: ${{ steps.get-issue-number.outputs.issue-number}}
        body-includes: '<!-- nuget-release-flow -->'
        comment-author: github-actions[bot]
        body: ${{ steps.sanitize-issue-comment.outputs.body }}
        edit-mode: replace
