name: NuGet release

on:
  issues:
    types: [opened, reopened]
  repository_dispatch:
    types: [retry-nuget-release-command]

defaults:
  run:
    shell: pwsh

jobs:
  debug:
    name: Debug
    environment: issue-nuget-release-workflow
    permissions:
      contents: read
      issues: write
    runs-on: ubuntu-latest
    steps:
    - name: Dump github context
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: $env:GITHUB_CONTEXT

  workflow-args:
    name: Process workflow input data
    if: (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'nuget-release')) || (github.event_name == 'repository_dispatch' && contains(github.event.client_payload.github.payload.issue.labels.*.name, 'nuget-release'))
    environment: issue-nuget-release-workflow
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      issue-number: ${{ steps.get-args.outputs.issue-number }}
      issue-body: ${{ steps.get-args.outputs.issue-body }}
    steps:
    - name: Get required arguments for NuGet release workflow
      id: get-args
      run: |
        $isRepositoryDispatchEvent = '${{ github.event_name }}' -eq 'repository_dispatch'
        $isIssueEvent = '${{ github.event_name }}' -eq 'issues'

        if($isIssueEvent) {
          $issueNumber = '${{ github.event.issue.number }}'
          $issueBody = '${{ github.event.issue.body }}'
        }
        elseif($isRepositoryDispatchEvent) {
          $issueNumber = '${{ github.event.client_payload.github.payload.issue.number }}'
          $issueBody = '${{ github.event.client_payload.github.payload.issue.body }}'
        }
        else {
          Write-Host "::error::Invalid GitHub event: ${{ github.event_name }}. Valid options are: issues or repository_dispatch"
          Exit 1
        }

        Write-Host "::set-output name=issue-number::$issueNumber"
    - name: Dump outputs from previous step
      env:
        STEP_OUTPUT: ${{ toJSON(steps.get-args.outputs) }}
      run: $env:STEP_OUTPUT

  main:
    name: Parse issue and trigger NuGet release
    needs: [workflow-args]
    environment: issue-nuget-release-workflow
    permissions:
      contents: read
      issues: write
    runs-on: ubuntu-latest
    outputs:
      nuget-id: ${{ steps.setup-client-payload.outputs.nuget-id }}
      nuget-version: ${{ steps.setup-client-payload.outputs.nuget-version }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - uses: edumserrano/github-issue-forms-parser@v1
      id: issue-parser
      with:
        template-filepath: .github/ISSUE_TEMPLATE/nuget-release.yml
        issue-form-body:  ${{ needs.workflow-args.outputs.issue-body }}
    - name: Show parsed data JSON
      run: |
        Write-Host "${{ steps.issue-parser.outputs.jsonString }}"
    - name: Create client payload for repository dispatch event
      id: setup-client-payload
      run: |
        $issueForm = '${{ steps.issue-parser.outputs.jsonString }}' | ConvertFrom-Json
        # the properties on the issueForm variable are kebab case. To access them in powershell I need to use single quotes around the property names
        $autoGenerateReleaseNotes = $issueForm.'auto-generate-release-notes' -eq 'yes'
        $nugetId = $issueForm.'nuget-id'
        $nugetVersion = $issueForm.'nuget-version'
        $clientPayload = @{
          issueNumber = ${{ needs.workflow-args.outputs.issue-number }}
          nugetId = $nugetId
          nugetVersion = $nugetVersion
          customReleaseNotes = $issueForm.'custom-release-notes'
          autoGenerateReleaseNotes = $autoGenerateReleaseNotes
        }
        $clientPayloadAsJson = $clientPayload | ConvertTo-Json -Compress
        Write-Host "::set-output name=client-payload::$clientPayloadAsJson"
        Write-Host "::set-output name=nuget-id::$nugetId"
        Write-Host "::set-output name=nuget-version::$nugetVersion"
    - name: Dump outputs from previous step
      env:
        STEP_OUTPUT: ${{ toJSON(steps.setup-client-payload.outputs) }}
      run: $env:STEP_OUTPUT
    - name: Update issue title
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh issue edit ${{ needs.workflow-args.outputs.issue-number }} --title "Release ${{ steps.setup-client-payload.outputs.nuget-id }} ${{ steps.setup-client-payload.outputs.nuget-version }} NuGet package"
    - name: Update issue labels
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $label = '${{ steps.setup-client-payload.outputs.nuget-id }}'
        gh issue edit ${{ needs.workflow-args.outputs.issue-number }} --add-label $label
    - name: Trigger NuGet release command via repository dispatch
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.REPOSITORY_DISPATCH_GH_TOKEN }}
        repository: ${{ github.repository}}
        event-type: nuget-release-command
        client-payload: '${{ steps.setup-client-payload.outputs.client-payload }}'

  output-artifacts:
    name: Create output artifacts
    needs: [ workflow-args, main ]
    if: always() && needs.main.result != 'skipped'
    environment: issue-nuget-release-workflow
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup NuGet release flow info
      id: set-nuget-release-flow-info
      run: |
        $workflowResult = '${{ needs.main.result }}'
        if($workflowResult -eq 'success') {
          $workflowStatus = "ok"
          $releaseStatus = "in%20progress"
          $releaseBadgeColor = "blue"
        }
        else {
          $workflowStatus = "error"
          $releaseStatus = "failed"
          $releaseBadgeColor = "red"
        }

        Write-Host "::set-output name=nuget-release-status::$releaseStatus"
        Write-Host "::set-output name=nuget-release-badge-color::$releaseBadgeColor"
        Write-Host "::set-output name=issue-nuget-release-node-status::$workflowStatus"
    - name: Upload NuGet release flow info artifact
      uses: ./.github/actions/create-nuget-release-flow-info-artifact
      with:
        issue-number: '${{ needs.workflow-args.outputs.issue-number }}'
        nuget-id: '${{ needs.main.outputs.nuget-id }}'
        nuget-version: '${{ needs.main.outputs.nuget-version }}'
        nuget-release-status: '${{ steps.set-nuget-release-flow-info.outputs.nuget-release-status }}'
        nuget-release-badge-color: '${{ steps.set-nuget-release-flow-info.outputs.nuget-release-badge-color }}'
        issue-nuget-release-node-status: '${{ steps.set-nuget-release-flow-info.outputs.issue-nuget-release-node-status}}'
        issue-nuget-release-url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'

