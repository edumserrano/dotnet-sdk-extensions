name: NuGet release

on:
  issues:
    types: [opened]
  repository_dispatch:
    types: [retry-nuget-release-command]

env:
  NUGET_RELEASE_LABEL : nuget-release

defaults:
  run:
    shell: pwsh

jobs:
  user-permissions-check:
    name: User permissions check
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      allowed: ${{ steps.check-user.outputs.require-result }}
    steps:
    - name: Dump github context for debug purposes
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: $env:GITHUB_CONTEXT
    - name: Check user permissions
      uses: actions-cool/check-user-permission@v2
      id: check-user
      with:
        username: '${{ github.triggering_actor }}'
        require: 'write'

  workflow-args:
    name: Process workflow input data
    needs: [user-permissions-check]
    if: needs.user-permissions-check.outputs.allowed == 'true' && ((github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'nuget-release')) || (github.event_name == 'repository_dispatch' && contains(github.event.client_payload.github.payload.issue.labels.*.name, 'nuget-release')))
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      issue-number: ${{ steps.get-args.outputs.issue-number }}
      issue-body: ${{ steps.get-args.outputs.issue-body }}
    steps:
    - name: Dump github context for debug purposes
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: $env:GITHUB_CONTEXT
    - name: Get required arguments for NuGet release workflow
      id: get-args
      run: |
        $isRepositoryDispatchEvent = '${{ github.event_name }}' -eq 'repository_dispatch'
        $isIssueEvent = '${{ github.event_name }}' -eq 'issues'

        if($isIssueEvent) {
          $issueNumber = '${{ github.event.issue.number }}'
          $issueBody = @'
        ${{ github.event.issue.body }}
        '@
        }
        elseif($isRepositoryDispatchEvent) {
          $issueNumber = '${{ github.event.client_payload.github.payload.issue.number }}'
          $issueBody = @'
        ${{ github.event.client_payload.github.payload.issue.body }}
        '@
        }
        else {
          Write-Output "::error::Invalid GitHub event: ${{ github.event_name }}. Valid options are: issues or repository_dispatch"
          Exit 1
        }

        Write-Output "issue-number=$issueNumber" >> $env:GITHUB_OUTPUT
        $random = Get-Random
        $delimiter = "EOF_$random"
        Write-Output "issue-body<<$delimiter" >> $env:GITHUB_OUTPUT
        Write-Output $issueBody >> $env:GITHUB_OUTPUT
        Write-Output $delimiter >> $env:GITHUB_OUTPUT
    - name: Dump outputs from previous step
      env:
        STEP_OUTPUT: ${{ toJSON(steps.get-args.outputs) }}
      run: $env:STEP_OUTPUT

  parse-issue:
    name: Parse and update issue
    needs: [workflow-args]
    permissions:
      contents: read
      issues: write
    runs-on: ubuntu-latest
    outputs:
      nuget-id: ${{ steps.parse-issue.outputs.nuget-id }}
      nuget-version: ${{ steps.parse-issue.outputs.nuget-version }}
      auto-generate-release-notes: ${{ steps.parse-issue.outputs.auto-generate-release-notes }}
      custom-release-notes: ${{ steps.parse-issue.outputs.custom-release-notes }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - uses: edumserrano/github-issue-forms-parser@v1
      id: issue-parser
      with:
        template-filepath: .github/ISSUE_TEMPLATE/nuget-release.yml
        issue-form-body:  ${{ needs.workflow-args.outputs.issue-body }}
    - name: Show parsed data JSON
      run: |
        Write-Output "${{ steps.issue-parser.outputs.jsonString }}"
    - name: Create client payload for repository dispatch event
      id: parse-issue
      run: |
        $issueForm = '${{ steps.issue-parser.outputs.parsed-issue }}' | ConvertFrom-Json
        # the properties on the issueForm variable are kebab case. To access them in powershell I need to use single quotes around the property names
        $autoGenerateReleaseNotes = $issueForm.'auto-generate-release-notes' -eq 'yes'
        $nugetId = $issueForm.'nuget-id'
        $nugetVersion = $issueForm.'nuget-version'
        $customReleaseNotes = $issueForm.'custom-release-notes'

        Write-Output "nuget-id=$nugetId" >> $env:GITHUB_OUTPUT
        Write-Output "nuget-version=$nugetVersion" >> $env:GITHUB_OUTPUT
        Write-Output "auto-generate-release-notes=$autoGenerateReleaseNotes" >> $env:GITHUB_OUTPUT
        # the custom-release-notes is potentially a multiline output value
        $random = Get-Random
        $delimiter = "EOF_$random"
        Write-Output "custom-release-notes<<$delimiter" >> $env:GITHUB_OUTPUT
        Write-Output $customReleaseNotes >> $env:GITHUB_OUTPUT
        Write-Output $delimiter >> $env:GITHUB_OUTPUT
    - name: Dump outputs from previous step
      env:
        STEP_OUTPUT: ${{ toJSON(steps.parse-issue.outputs) }}
      run: $env:STEP_OUTPUT
    - name: Update issue title
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh issue edit ${{ needs.workflow-args.outputs.issue-number }} --title "Release ${{ steps.parse-issue.outputs.nuget-id }} ${{ steps.parse-issue.outputs.nuget-version }} NuGet package"
    - name: Update issue labels
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $label = '${{ steps.parse-issue.outputs.nuget-id }}'
        gh issue edit ${{ needs.workflow-args.outputs.issue-number }} --add-label $label

  release-info:
    name: Upload release info
    needs: [workflow-args, parse-issue]
    permissions:
      contents: read
      statuses: write
    runs-on: ubuntu-latest
    env:
      RELEASE_NOTES_ARTIFACT_FILEPATH: ${{github.workspace}}/nuget-release-notes.md
      RELEASE_INFO_ARTIFACT_FILEPATH: ${{github.workspace}}/nuget-release-info.md
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Save release notes to file
      run: |
        $releaseNotes = @'
        ${{ needs.parse-issue.outputs.custom-release-notes }}
        '@
        $releaseNotes > ${{ env.RELEASE_NOTES_ARTIFACT_FILEPATH }}
        cat ${{ env.RELEASE_NOTES_ARTIFACT_FILEPATH }}
    - name: Upload release notes
      uses: actions/upload-artifact@v3
      with:
        name: nuget-release-notes
        path: ${{ env.RELEASE_NOTES_ARTIFACT_FILEPATH }}
    - name: Save release info to file
      run: |
        $releaseInfo = @{
          issueNumber = ${{ needs.workflow-args.outputs.issue-number }}
          nugetId = "${{ needs.parse-issue.outputs.nuget-id }}"
          nugetVersion = "${{ needs.parse-issue.outputs.nuget-version }}"
          autoGenerateReleaseNotes = "${{ needs.parse-issue.outputs.auto-generate-release-notes }}"
        }
        $releaseInfoAsJson = $releaseInfo | ConvertTo-Json
        $releaseInfoAsJson > ${{ env.RELEASE_INFO_ARTIFACT_FILEPATH }}
        cat ${{ env.RELEASE_INFO_ARTIFACT_FILEPATH }}
    - name: Upload release info
      uses: actions/upload-artifact@v3
      with:
        name: nuget-release-info
        path: ${{ env.RELEASE_INFO_ARTIFACT_FILEPATH }}

  check-pr:
    name: Check for open NuGet release PR
    needs: [parse-issue]
    permissions:
      contents: read
      pull-requests: read
    runs-on: ubuntu-latest
    outputs:
      can-create-pr: ${{ steps.open-pr-check.outputs.can-create-pr }}
    steps:
    - name: Dump github context for debug purposes
      env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
      run: $env:GITHUB_CONTEXT
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Check for open dotnet format PRs
      id: open-pr-check
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        $nugetId = "${{ needs.parse-issue.outputs.nuget-id }}"
        $openPullRequestsResult = gh pr list --state open --label ${{ env.NUGET_RELEASE_LABEL }} --label $nugetId
        $canCreatePr = [string]::IsNullOrEmpty($openPullRequestsResult)
        Write-Output "can-create-pr=$canCreatePr" >> $env:GITHUB_OUTPUT
    - name: Log info
      run: |
        $nugetId = "${{ needs.parse-issue.outputs.nuget-id }}"
        $canCreatePr = [System.Convert]::ToBoolean("${{ steps.open-pr-check.outputs.can-create-pr }}")

        if($canCreatePr)
        {
          Write-Output "::notice::There's no open PR to release $nugetId NuGet."
        }
        else
        {
          Write-Output "::warning::A PR to release $nugetId NuGet is already open so a new one will not be created. Only one NuGet release PR can be open at a time."
        }

  create-pr:
    name: Create NuGet release PR
    needs: [workflow-args, parse-issue, check-pr]
    if: needs.check-pr.outputs.can-create-pr == 'true'
    permissions:
      contents: write
      pull-requests: write
      statuses: write
    runs-on: ubuntu-latest
    outputs:
      pr-number: ${{ steps.create-pr.outputs.pr-number }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup NuGet release PR data
      id: nuget-release-pr-data
      run: |
        $nugetId = "${{ needs.parse-issue.outputs.nuget-id }}"
        $nugetNewVersion = "${{ needs.parse-issue.outputs.nuget-version }}"
        $nugetUrl = "https://www.nuget.org/packages/$nugetId"

        $nugetOutput = nuget list PackageId:$nugetId -Source nuget.org -PreRelease
        $nugetCurrentVersion = $nugetOutput.Split(" ")[-1]

        if($nugetId -eq 'dotnet-sdk-extensions')
        {
          $projFilePath = "${{ github.workspace }}/src/DotNet.Sdk.Extensions/DotNet.Sdk.Extensions.csproj"
        }
        elseif($nugetId -eq 'dotnet-sdk-extensions-testing')
        {
          $projFilePath = "${{ github.workspace }}/src/DotNet.Sdk.Extensions.Testing/DotNet.Sdk.Extensions.Testing.csproj"
        }
        else
        {
          Write-Output "::error::Invalid NuGet ID: $nugetId. Valid options are: dotnet-sdk-extensions or dotnet-sdk-extensions-testing"
          Exit 1
        }

        Write-Output "nuget-id=$nugetId"
        Write-Output "nuget-new-version=$nugetNewVersion"
        Write-Output "nuget-url=$nugetUrl"
        Write-Output "current-nuget-new-version=$nugetCurrentVersion"
        Write-Output "nuget-id=$nugetId" >> $env:GITHUB_OUTPUT
        Write-Output "nuget-new-version=$nugetNewVersion" >> $env:GITHUB_OUTPUT
        Write-Output "nuget-url=$nugetUrl" >> $env:GITHUB_OUTPUT
        Write-Output "nuget-current-version=$nugetCurrentVersion" >> $env:GITHUB_OUTPUT
        Write-Output "proj-filepath=$projFilePath" >> $env:GITHUB_OUTPUT
    - name: Prepare commit info
      id: commit-info
      run: |
        $nugetId = "${{ steps.nuget-release-pr-data.outputs.nuget-id }}";
        $nugetNewVersion = "${{ steps.nuget-release-pr-data.outputs.nuget-new-version }}";
        $branchName = "nuget-release/$nugetId-$nugetNewVersion"
        $commitMessage = "Release NuGet $nugetId $nugetNewVersion"
        Write-Output "branch-name=$branchName" >> $env:GITHUB_OUTPUT
        Write-Output "Branch name set to $branchName"
        Write-Output "commit-message=$commitMessage" >> $env:GITHUB_OUTPUT
        Write-Output "Commit message set to $commitMessage"
    - name: Git checkout new branch
      run: |
        git checkout -b ${{ steps.commit-info.outputs.branch-name }}
    - name: Update Nuget package version
      run: |
        $projFilePath = '${{ steps.nuget-release-pr-data.outputs.proj-filepath }}'
        $nugetNewVersion = '${{ steps.nuget-release-pr-data.outputs.nuget-new-version }}'

        Write-Output "::group::csproj before updating version"
        cat $projFilePath
        Write-Output "::endgroup::"

        $xml=New-Object XML
        $xml.PreserveWhitespace = $true
        $xml.Load($projFilePath)
        $xml.Project.PropertyGroup.Version = $nugetNewVersion
        $xml.Save($projFilePath)

        Write-Output "::group::csproj after updating version"
        cat $projFilePath
        Write-Output "::endgroup::"
    - name: Update NuGet package README
      run: |
        $nugetId = '${{ steps.nuget-release-pr-data.outputs.nuget-id }}'
        $nugetNewVersion = '${{ steps.nuget-release-pr-data.outputs.nuget-new-version }}''
        $nugetReadmeFilepath = "./docs/nuget/$nugetId-nuget-readme.md"
        $nugetReadme = Get-Content -path $nugetReadmeFilepath
        $nugetReadme = $nugetReadme -replace "$nugetId-(\d+\.\d+\.\d+)", "$nugetId-$nugetNewVersion"
        Set-Content -Path $nugetReadmeFilepath -Value $nugetReadme
    - name: Push changes to branch
      id: auto-commit-action
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: ${{ steps.commit-info.outputs.commit-message }}
        branch: ${{ steps.commit-info.outputs.branch-name }}
    - name: Render PR body template
      uses: yukitsune/template-cli@v0.1.0
      with:
        args: --input .github/workflows/templates/nuget-release/create-nuget-release-pr-body.md \
          --value "nugetId=${{ steps.nuget-release-pr-data.outputs.nuget-id }}" \
          --value "nugetCurrentVersion=${{ steps.nuget-release-pr-data.outputs.nuget-current-version }}" \
          --value "nugetNewVersion=${{ steps.nuget-release-pr-data.outputs.nuget-new-version }}" \
          --value "nugetUrl=${{ steps.nuget-release-pr-data.outputs.nuget-url }}" \
          --value "issueNumber=${{ needs.workflow-args.outputs.issue-number }}" \
          --output .
    - name: Set render PR body template as step output
      id: render-pr-body-template
      run: |
        $fileContent = Get-Content ./create-nuget-release-pr-body.md
        $random = Get-Random
        $delimiter = "EOF_$random"
        Write-Output "result<<$delimiter" >> $env:GITHUB_OUTPUT
        Write-Output $fileContent >> $env:GITHUB_OUTPUT
        Write-Output $delimiter >> $env:GITHUB_OUTPUT
    - name: Create NuGet release PR
      id: create-pr
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_SCOPE_GH_TOKEN }}
      run: |
        $title = "Release NuGet ${{ steps.nuget-release-pr-data.outputs.nuget-id }} ${{ steps.nuget-release-pr-data.outputs.nuget-new-version }}"
        $body = @'
        ${{ steps.render-pr-body-template.outputs.result }}
        '@
        $prUrl = gh pr create `
          --title $title `
          --body $body `
          --label ${{ env.NUGET_RELEASE_LABEL }} `
          --label ${{ steps.nuget-release-pr-data.outputs.nuget-id }} `
          --label bot:robot:
        $prNumber = $prUrl.Split("/")[-1]
        Write-Output "pr-url=$prUrl" >> $env:GITHUB_OUTPUT
        Write-Output "pr-number=$prNumber" >> $env:GITHUB_OUTPUT
    - name: Log info
      run: |
        $prUrl = "${{ steps.create-pr.outputs.pr-url }}"
        Write-Output "::notice title=NuGet release::A PR to release NuGet ${{ steps.nuget-release-pr-data.outputs.nuget-id }} ${{ steps.nuget-release-pr-data.outputs.nuget-new-version }} was created at $prUrl."
    - name: Set PR status
      uses: ./.github/actions/create-gh-status # this status check will be used by the pr-nuget-release-flow-diagram workflow to be able to access the nuget release info artifact uploaded by this workflow
      with:
        repo: ${{ github.repository }}
        pr-num: ${{ steps.create-pr.outputs.pr-number }}
        context: '${{ github.workflow }} / NuGet release info (${{ github.event_name }})' # mimic format from github
        state: success
        description: Successful
        target-url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        token: ${{ secrets.GITHUB_TOKEN }}

  merge-pr:
    name: Set PR auto merge
    needs: [create-pr]
    if: always() && needs.create-pr.result == 'success'
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set PR auto merge
      env:
        GITHUB_TOKEN: ${{ secrets.PUBLIC_REPO_SCOPE_GH_TOKEN }}
      run: |
        gh pr merge --auto --squash --delete-branch ${{ needs.create-pr.outputs.pr-number }}

  output-artifacts:
    name: Create output artifacts
    needs: [ workflow-args, parse-issue, user-permissions-check, merge-pr ]
    if: always()
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup NuGet release flow info
      id: set-nuget-release-flow-info
      run: |
        $workflowResult = '${{ needs.merge-pr.result }}'
        if($workflowResult -eq 'success')
        {
          $workflowStatus = "ok"
          $releaseStatus = "in%20progress"
          $releaseBadgeColor = "blue"
        }
        else
        {
          $workflowStatus = "error"
          $releaseStatus = "failed"
          $releaseBadgeColor = "red"
        }

        Write-Output "nuget-release-status=$releaseStatus" >> $env:GITHUB_OUTPUT
        Write-Output "nuget-release-badge-color=$releaseBadgeColor" >> $env:GITHUB_OUTPUT
        Write-Output "issue-nuget-release-node-status=$workflowStatus" >> $env:GITHUB_OUTPUT
        Write-Output "is-user-allowed-to-release-nuget=$isUserAllowedToReleaseNuget" >> $env:GITHUB_OUTPUT
    - name: Upload NuGet release flow info artifact
      uses: ./.github/actions/create-nuget-release-flow-info-artifact
      with:
        issue-number: '${{ needs.workflow-args.outputs.issue-number }}'
        nuget-id: '${{ needs.parse-issue.outputs.nuget-id }}'
        nuget-version: '${{ needs.parse-issue.outputs.nuget-version }}'
        nuget-release-status: '${{ steps.set-nuget-release-flow-info.outputs.nuget-release-status }}'
        nuget-release-badge-color: '${{ steps.set-nuget-release-flow-info.outputs.nuget-release-badge-color }}'
        issue-nuget-release-node-status: '${{ steps.set-nuget-release-flow-info.outputs.issue-nuget-release-node-status}}'
        issue-nuget-release-url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
        is-user-allowed-to-release-nuget: '${{ steps.set-nuget-release-flow-info.outputs.is-user-allowed-to-release-nuget }}'
