# Why was this action created:
#
# I was using the following command:
# 'dotnet nuget push ./*.nupkg --api-key <api-key> --source https://api.nuget.org/v3/index.json --skip-duplicate'
# to push a nuget package and its symbols to NuGet.org
#
# The problem was that even if the nuget package already existed the '--skip-duplicate' flag only makes it so that
# the nuget push command doesn't fail due to the returned 409 from the server but it still tries to push the
# symbols package after.
#
# The above doesn't fail but it makes NuGet.org send emails to the owner of the package with the following:
#
# 'Symbols package publishing failed. The associated symbols package could not be published due to the following reason(s):
# The uploaded symbols package contains pdb(s) for a corresponding dll(s) not found in the nuget package.
# Once you've fixed the issue with your symbols package, you can re-upload it.
#
# Please note: The last successfully published symbols package is still available for debugging and download.'
#
# The above error message is also displayed on the nuget's package page even though it's only visible to the owner of the package.
#
# To avoid this happening the action below will attempt to do a push first only of the nuget package and only if it succeeds
# attempts to do a following push of the symbols package.
# If the nuget push returns a 409 because the package exists that is outputted by the action and the symbols push is skipped.
# If the nuget push fails because of any other reason the output from nuget push is outputted by the action and the symbols push is skipped.
#

name: 'NuGet push'
description: 'Pushes a nuget package and symbols.'
inputs:
  api-key:
    description: 'The API key for the NuGet server.'
    required: true
  working-directory:
    description: 'The directory that will be used to push nuget packages. It will push all *.nupkg and corresponding symbol packages present in the directory.'
    required: false
  nuget-package:
    description: 'The filepath for the NuGet package to be pushed.'
    required: false
  symbols-package:
    description: 'The filepath for the symbols package to be pushed.'
    required: false
outputs:
  status:
    description: "The overall status of pushing the NuGet packages and corresponding symbols. It will be 'ok' if all packages where pushed successfully or already existed and 'error' otherwise."
    value: ${{ steps.set-outputs.outputs.status }}
  push-result:
    description: "The result of pushing the NuGet packages and corresponding symbols as a JSON string."
    value: ${{ steps.set-outputs.outputs.push-result }}

runs:
  using: "composite"
  steps:
    - name: Setup variables
      shell: pwsh
      id: setup
      run: |
        Write-Output "::set-output name=nuget-server-url::https://api.nuget.org/v3/index.json"
        Write-Output "::set-output name=nuget-push-ok-status::ok"
        Write-Output "::set-output name=nuget-push-already-exists-status::nuget-already-exists"
        Write-Output "::set-output name=nuget-push-failed-status::nuget-push-failed"
        Write-Output "::set-output name=symbols-push-failed-status::symbols-push-failed"
    - name: Push all NuGet and Symbols from working directory
      shell: pwsh
      id: push-workding-dir
      if: inputs.working-directory != ''
      working-directory: ${{ inputs.working-directory }}
      run: |
        $nugetServerUrl = '${{ steps.setup.outputs.nuget-server-url }}'
        $output = @{
          status = ''
          packages = [System.Collections.ArrayList]::new()
        }

        # group '.nupgk' and '.snupkg' by filename. This assumes each package (.nupgk) and corresponding symbols (.snupkg)
        # have the same filename, only the extension is different.
        $groups = Get-ChildItem -Path .\ -Filter *.*nupkg | Group-Object -Property BaseName

        # output the packages and symbols that will be uploaded
        Write-Output "::group::Pushing the following NuGet packages and symbols to $nugetServerUrl"
        foreach($group in $groups) {
          Write-Output "The package with filename $($group.Name) will have the following files uploaded:"
          foreach($file in $group.Group) {
            Write-Output "$file"
          }
        }
        Write-Output "::endgroup::"

        $nugetPushOkStatus = '${{ steps.setup.outputs.nuget-push-ok-status }}'
        $nugetPushAlreadyExistsStatus = '${{ steps.setup.outputs.nuget-push-already-exists-status }}'
        $nugetPushFailedStatus = '${{ steps.setup.outputs.nuget-push-failed-status }}'
        $symbolsPushFailedStatus = '${{ steps.setup.outputs.symbols-push-failed-status }}'
        # for each group we will try to push the NuGet package and if that is successfull we will then push the symbols package.
        foreach($group in $groups) {
          # each group will be a group of '.nupgk' and corresponding '.snupkg'
          # try to upload the nuget package and if is successful then upload its symbols if available.
          $files = $group.Group
          $package = $files | Where-Object {$_.Extension -eq '.nupkg' } | Select-Object -First 1
          $symbols = $files | Where-Object {$_.Extension -eq '.snupkg' } | Select-Object -First 1
          $packageOutput = @{
              package = $package.PSChildName
              symbols = $symbols.PSChildName
              status = ''
          }

          # upload NuGet package if exists
          if($package -ne $null) {
            Write-Output "::group::Pushing $package NuGet package."
            $nugetResponse = dotnet nuget push $package --api-key ${{ inputs.api-key }} --source $nugetServerUrl --no-symbols --force-english-output
            $nugetPushExitCode = $LastExitCode
            $nugetAlreadyExists = ($nugetResponse | ?{$_.Contains("Response status code does not indicate success: 409")}).Length -gt 0

            if($nugetAlreadyExists) {
              $packageOutput.status = $nugetPushAlreadyExistsStatus
              Write-Output "The NuGet package $package already exists. The output from nuget push was:"
              Write-Output $nugetResponse
            }
            elseif($nugetPushExitCode -ne 0) {
              $packageOutput.status = $nugetPushFailedStatus
              Write-Output "::error::Failed to push NuGet package $package. See the action logs for more information."
              Write-Output "NuGet push failed. The output from nuget push was:"
              Write-Output $nugetResponse
            }
            else {
              $packageOutput.status = $nugetPushOkStatus
              Write-Output "NuGet push was successful. The output from nuget push was:"
              Write-Output $nugetResponse

              # upload symbols if exists
              if($symbols -ne $null) {
                Write-Output "Pushing NuGet symbols package $symbols"
                $symbolsResponse = dotnet nuget push $symbols --api-key ${{ inputs.api-key }} --source $nugetServerUrl
                $symbolsPushExitCode = $LastExitCode
                Write-Output $symbolsResponse

                if($symbolsPushExitCode -ne 0) {
                  $packageOutput.status = $symbolsPushFailedStatus
                  Write-Output "::error::Failed to push NuGet symbols package $symbols. See the action logs for more information."
                }
              }
            }

            $output.packages.Add($packageOutput)
            Write-Output "::endgroup::"
          }
        }

        $outputAsJson = $output | ConvertTo-Json -compress
        Write-Output "::set-output name=push-result::$outputAsJson"
        Exit 0 # always exit sucessfully regardless of the exit codes from 'dotnet nuget push' command, the exit code for the action will be set in the next step
    - name: Push specific NuGet and Symbols
      shell: pwsh
      id: push-specific-files
      if: inputs.nuget-package != ''
      run: |
        $nugetServerUrl = '${{ steps.setup.outputs.nuget-server-url }}'
        $nugetPushOkStatus = '${{ steps.setup.outputs.nuget-push-ok-status }}'
        $nugetPushAlreadyExistsStatus = '${{ steps.setup.outputs.nuget-push-already-exists-status }}'
        $nugetPushFailedStatus = '${{ steps.setup.outputs.nuget-push-failed-status }}'
        $symbolsPushFailedStatus = '${{ steps.setup.outputs.symbols-push-failed-status }}'
        $output = @{
          status = ''
          packages = [System.Collections.ArrayList]::new()
        }
        $packageOutput = @{
            package = ''
            symbols = ''
            status = ''
        }

        # output the packages and symbols that will be uploaded
        Write-Output "::group::Pushing the following NuGet packages and symbols to $nugetServerUrl"
        Write-Output '${{ inputs.nuget-package }}'
        Write-Output '${{ inputs.symbols-package }}'
        Write-Output "::endgroup::"

        # try to upload the nuget package and if is successful then upload its symbols if available.
        # upload NuGet package if exists
        if('${{ inputs.nuget-package }}' -ne '') {
          $package = Get-Item '${{ inputs.nuget-package }}'
          $packageOutput.package = $package.PSChildName
          Write-Output "::group::Pushing $package NuGet package."
          $nugetResponse = dotnet nuget push $package --api-key ${{ inputs.api-key }} --source $nugetServerUrl --no-symbols --force-english-output
          $nugetPushExitCode = $LastExitCode
          $nugetAlreadyExists = ($nugetResponse | ?{$_.Contains("Response status code does not indicate success: 409")}).Length -gt 0

          if($nugetAlreadyExists) {
            $packageOutput.status = $nugetPushAlreadyExistsStatus
            Write-Output "The NuGet package $package already exists. The output from nuget push was:"
            Write-Output $nugetResponse
          }
          elseif($nugetPushExitCode -ne 0) {
            $packageOutput.status = $nugetPushFailedStatus
            Write-Output "::error::Failed to push NuGet package $package. See the action logs for more information."
            Write-Output "NuGet push failed. The output from nuget push was:"
            Write-Output $nugetResponse
          }
          else {
            $packageOutput.status = $nugetPushOkStatus
            Write-Output "NuGet push was successful. The output from nuget push was:"
            Write-Output $nugetResponse

            # upload symbols if exists
            if('${{ inputs.symbols-package }}' -ne '') {
              $symbols = Get-Item '${{ inputs.symbols-package }}'
              $packageOutput.symbols = $symbols.PSChildName
              Write-Output "Pushing NuGet symbols package $symbols"
              $symbolsResponse = dotnet nuget push $symbols --api-key ${{ inputs.api-key }} --source $nugetServerUrl
              $symbolsPushExitCode = $LastExitCode
              Write-Output $symbolsResponse

              if($symbolsPushExitCode -ne 0) {
                $packageOutput.status = $symbolsPushFailedStatus
                Write-Output "::error::Failed to push NuGet symbols package $symbols. See the action logs for more information."
              }
            }
          }

          $output.packages.Add($packageOutput)
          Write-Output "::endgroup::"
        }

        $outputAsJson = $output | ConvertTo-Json -compress
        Write-Output "::set-output name=push-result::$outputAsJson"
        Exit 0 # always exit sucessfully regardless of the exit codes from 'dotnet nuget push' command, the exit code for the action will be set in the next step
    - name: Set action outputs
      shell: pwsh
      id: set-outputs
      run: |
        $pushWorkingDirOutput = '${{ steps.push-workding-dir.outputs.push-result }}'
        $pushSpecificFilesOutput = '${{ steps.push-specific-files.outputs.push-result }}'
        if($pushWorkingDirOutput -ne '') {
          $pushResult = $pushWorkingDirOutput | ConvertFrom-Json
        }
        elseif($pushWorkingDirOutput -ne '') {
          $pushResult = $pushWorkingDirOutput | ConvertFrom-Json
        }
        else {
          Write-Output "::error::Unexpected empty output from nuget push step. See action logs for more details."
          Exit 1
        }

        $packagesFailed = $pushResult.packages | Where-Object {$_.status -eq $nugetPushFailedStatus -or $_.status -eq $symbolsPushFailedStatus }
        $allOk = $packagesFailed.count -eq 0
        if($allOk) {
          $pushResult.status = 'ok'
        }
        else {
          $pushResult.status = 'error'
        }

        Write-Output "::group::Action output"
        $pushResult | ConvertTo-Json
        Write-Output "::endgroup::"

        # set action output
        $pushResultAsJson = $pushResult | ConvertTo-Json -compress
        Write-Output "::set-output name=push-result::$pushResultAsJson"
        Write-Output "::set-output name=status::$($pushResult.status)"

        if($allOk) {
          Write-Output "All NuGet packages uploaded successfully."
          Exit 0
        }
        else {
          Write-Output "Some NuGet packages weren't uploaded successfully."
          Exit 1
        }
